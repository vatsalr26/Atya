// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  password          String?
  googleId          String?            @unique
  linkedInId        String?            @unique
  orcidId           String?            @unique
  role              UserRole
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  researcherProfile ResearcherProfile?
  universityProfile UniversityProfile?
}

// --- Researcher-Related Models ---

model ResearcherProfile {
  id                 String        @id @default(cuid())
  fullName           String
  professionalTitle  String? // Add this if you need it
  currentInstitution String? // Add this if you need it
  currentLocation    String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])
  userId             String        @unique
  education          Education[]
  publications       Publication[]
  documents          Document[]
  proposals          Proposal[]
  applications       Application[]
}

model Education {
  id                  String            @id @default(cuid())
  degree              String
  fieldOfStudy        String
  institution         String
  country             String
  startDate           DateTime
  endDate             DateTime?
  researcherProfile   ResearcherProfile @relation(fields: [researcherProfileId], references: [id])
  researcherProfileId String
}

model Publication {
  id                  String            @id @default(cuid())
  title               String
  journal             String?
  year                Int
  link                String?
  researcherProfile   ResearcherProfile @relation(fields: [researcherProfileId], references: [id])
  researcherProfileId String
}

model Document {
  id                  String            @id @default(cuid())
  name                String
  url                 String
  type                DocumentType
  researcherProfile   ResearcherProfile @relation(fields: [researcherProfileId], references: [id])
  researcherProfileId String
}

model Proposal {
  id                  String            @id @default(cuid())
  title               String
  content             Json
  isFinal             Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  researcherProfile   ResearcherProfile @relation(fields: [researcherProfileId], references: [id])
  researcherProfileId String
  application         Application?
}

// --- University-Related Models ---

model University {
  id       String              @id @default(cuid())
  name     String              @unique
  country  String
  profiles UniversityProfile[]
}

model UniversityProfile {
  id             String   @id @default(cuid())
  departmentName String
  faculty        String? // Added
  logoUrl        String? // Added
  bannerImageUrl String? // Added
  address        String? // Added
  websiteUrl     String? // Added
  description    String?  @db.Text // Added
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // --- Relationships ---
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @unique
  university   University @relation(fields: [universityId], references: [id])
  universityId String
  openCalls    OpenCall[]
}

// --- Core Platform Models ---

model OpenCall {
  id                         String            @id @default(cuid())
  title                      String
  summary                    String            @db.Text
  researchArea               String
  keywords                   String[]
  projectTypes               ProjectType[]
  targetNumberOfAwards       Int
  assistanceOffered          String?           @db.Text
  eligibleInstitutionTypes   String[]
  eligibleCountries          String[]
  eligibleCareerStages       JobType[]
  requiresProposal           Boolean           @default(true)
  proposalTemplateUrl        String?
  customApplicationQuestions Json?
  evaluationCriteria         Json?
  fundingType                String
  fundingAmount              String
  submissionOpenDate         DateTime
  submissionDeadline         DateTime
  reviewPeriodStartDate      DateTime
  notificationDate           DateTime
  status                     OpenCallStatus    @default(DRAFT)
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  author                     UniversityProfile @relation(fields: [authorId], references: [id])
  authorId                   String
  applications               Application[]
}

model Application {
  id                       String            @id @default(cuid())
  status                   ApplicationStatus @default(NEW)
  submittedAt              DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  submittedCoverLetter     String?           @db.Text
  customApplicationAnswers Json?
  offerType                OfferType?
  offerConditions          String?           @db.Text
  offerRespondedAt         DateTime?
  researcherResponse       OfferResponse?
  applicant                ResearcherProfile @relation(fields: [applicantId], references: [id])
  applicantId              String
  openCall                 OpenCall          @relation(fields: [openCallId], references: [id])
  openCallId               String
  submittedProposal        Proposal?         @relation(fields: [submittedProposalId], references: [id])
  submittedProposalId      String?           @unique
}

// --- Enums ---

enum UserRole {
  RESEARCHER
  UNIVERSITY_STAFF
}

enum JobType {
  POSTDOC
  PHD_STUDENT
  TENURE_TRACK
  INDUSTRY_RESEARCHER
}

enum DocumentType {
  CV_RESUME
  REFERENCE_LETTER
  PORTFOLIO
}

enum ProjectType {
  APPLIED_RESEARCH
  COLLABORATIVE_PROJECT
  CASE_STUDY
  FULL_GRANT
}

enum OpenCallStatus {
  DRAFT
  OPEN
  IN_REVIEW
  CLOSED
}

enum OfferType {
  STANDARD
  CONDITIONAL
}

enum OfferResponse {
  ACCEPTED
  DECLINED
}

enum ApplicationStatus {
  NEW
  UNDER_REVIEW
  SHORTLISTED
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}
