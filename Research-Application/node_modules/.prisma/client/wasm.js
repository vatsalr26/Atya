
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  googleId: 'googleId',
  linkedInId: 'linkedInId',
  orcidId: 'orcidId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResearcherProfileScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  professionalTitle: 'professionalTitle',
  currentInstitution: 'currentInstitution',
  currentLocation: 'currentLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  institution: 'institution',
  country: 'country',
  startDate: 'startDate',
  endDate: 'endDate',
  researcherProfileId: 'researcherProfileId'
};

exports.Prisma.PublicationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  journal: 'journal',
  year: 'year',
  link: 'link',
  researcherProfileId: 'researcherProfileId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  type: 'type',
  researcherProfileId: 'researcherProfileId'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  isFinal: 'isFinal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  researcherProfileId: 'researcherProfileId'
};

exports.Prisma.UniversityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country'
};

exports.Prisma.UniversityProfileScalarFieldEnum = {
  id: 'id',
  departmentName: 'departmentName',
  faculty: 'faculty',
  logoUrl: 'logoUrl',
  bannerImageUrl: 'bannerImageUrl',
  address: 'address',
  websiteUrl: 'websiteUrl',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  universityId: 'universityId'
};

exports.Prisma.OpenCallScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  researchArea: 'researchArea',
  keywords: 'keywords',
  projectTypes: 'projectTypes',
  targetNumberOfAwards: 'targetNumberOfAwards',
  assistanceOffered: 'assistanceOffered',
  eligibleInstitutionTypes: 'eligibleInstitutionTypes',
  eligibleCountries: 'eligibleCountries',
  eligibleCareerStages: 'eligibleCareerStages',
  requiresProposal: 'requiresProposal',
  proposalTemplateUrl: 'proposalTemplateUrl',
  customApplicationQuestions: 'customApplicationQuestions',
  evaluationCriteria: 'evaluationCriteria',
  fundingType: 'fundingType',
  fundingAmount: 'fundingAmount',
  submissionOpenDate: 'submissionOpenDate',
  submissionDeadline: 'submissionDeadline',
  reviewPeriodStartDate: 'reviewPeriodStartDate',
  notificationDate: 'notificationDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  submittedAt: 'submittedAt',
  updatedAt: 'updatedAt',
  submittedCoverLetter: 'submittedCoverLetter',
  customApplicationAnswers: 'customApplicationAnswers',
  offerType: 'offerType',
  offerConditions: 'offerConditions',
  offerRespondedAt: 'offerRespondedAt',
  researcherResponse: 'researcherResponse',
  applicantId: 'applicantId',
  openCallId: 'openCallId',
  submittedProposalId: 'submittedProposalId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  RESEARCHER: 'RESEARCHER',
  UNIVERSITY_STAFF: 'UNIVERSITY_STAFF'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  CV_RESUME: 'CV_RESUME',
  REFERENCE_LETTER: 'REFERENCE_LETTER',
  PORTFOLIO: 'PORTFOLIO'
};

exports.OpenCallStatus = exports.$Enums.OpenCallStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  IN_REVIEW: 'IN_REVIEW',
  CLOSED: 'CLOSED'
};

exports.ProjectType = exports.$Enums.ProjectType = {
  APPLIED_RESEARCH: 'APPLIED_RESEARCH',
  COLLABORATIVE_PROJECT: 'COLLABORATIVE_PROJECT',
  CASE_STUDY: 'CASE_STUDY',
  FULL_GRANT: 'FULL_GRANT'
};

exports.JobType = exports.$Enums.JobType = {
  POSTDOC: 'POSTDOC',
  PHD_STUDENT: 'PHD_STUDENT',
  TENURE_TRACK: 'TENURE_TRACK',
  INDUSTRY_RESEARCHER: 'INDUSTRY_RESEARCHER'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  NEW: 'NEW',
  UNDER_REVIEW: 'UNDER_REVIEW',
  SHORTLISTED: 'SHORTLISTED',
  INTERVIEW: 'INTERVIEW',
  OFFER: 'OFFER',
  HIRED: 'HIRED',
  REJECTED: 'REJECTED'
};

exports.OfferType = exports.$Enums.OfferType = {
  STANDARD: 'STANDARD',
  CONDITIONAL: 'CONDITIONAL'
};

exports.OfferResponse = exports.$Enums.OfferResponse = {
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

exports.Prisma.ModelName = {
  User: 'User',
  ResearcherProfile: 'ResearcherProfile',
  Education: 'Education',
  Publication: 'Publication',
  Document: 'Document',
  Proposal: 'Proposal',
  University: 'University',
  UniversityProfile: 'UniversityProfile',
  OpenCall: 'OpenCall',
  Application: 'Application'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
