
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ResearcherProfile
 * 
 */
export type ResearcherProfile = $Result.DefaultSelection<Prisma.$ResearcherProfilePayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Publication
 * 
 */
export type Publication = $Result.DefaultSelection<Prisma.$PublicationPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Proposal
 * 
 */
export type Proposal = $Result.DefaultSelection<Prisma.$ProposalPayload>
/**
 * Model University
 * 
 */
export type University = $Result.DefaultSelection<Prisma.$UniversityPayload>
/**
 * Model UniversityProfile
 * 
 */
export type UniversityProfile = $Result.DefaultSelection<Prisma.$UniversityProfilePayload>
/**
 * Model OpenCall
 * 
 */
export type OpenCall = $Result.DefaultSelection<Prisma.$OpenCallPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  RESEARCHER: 'RESEARCHER',
  UNIVERSITY_STAFF: 'UNIVERSITY_STAFF'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const DocumentType: {
  CV_RESUME: 'CV_RESUME',
  REFERENCE_LETTER: 'REFERENCE_LETTER',
  PORTFOLIO: 'PORTFOLIO'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const OpenCallStatus: {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  IN_REVIEW: 'IN_REVIEW',
  CLOSED: 'CLOSED'
};

export type OpenCallStatus = (typeof OpenCallStatus)[keyof typeof OpenCallStatus]


export const ProjectType: {
  APPLIED_RESEARCH: 'APPLIED_RESEARCH',
  COLLABORATIVE_PROJECT: 'COLLABORATIVE_PROJECT',
  CASE_STUDY: 'CASE_STUDY',
  FULL_GRANT: 'FULL_GRANT'
};

export type ProjectType = (typeof ProjectType)[keyof typeof ProjectType]


export const JobType: {
  POSTDOC: 'POSTDOC',
  PHD_STUDENT: 'PHD_STUDENT',
  TENURE_TRACK: 'TENURE_TRACK',
  INDUSTRY_RESEARCHER: 'INDUSTRY_RESEARCHER'
};

export type JobType = (typeof JobType)[keyof typeof JobType]


export const ApplicationStatus: {
  NEW: 'NEW',
  UNDER_REVIEW: 'UNDER_REVIEW',
  SHORTLISTED: 'SHORTLISTED',
  INTERVIEW: 'INTERVIEW',
  OFFER: 'OFFER',
  HIRED: 'HIRED',
  REJECTED: 'REJECTED'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const OfferType: {
  STANDARD: 'STANDARD',
  CONDITIONAL: 'CONDITIONAL'
};

export type OfferType = (typeof OfferType)[keyof typeof OfferType]


export const OfferResponse: {
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type OfferResponse = (typeof OfferResponse)[keyof typeof OfferResponse]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type OpenCallStatus = $Enums.OpenCallStatus

export const OpenCallStatus: typeof $Enums.OpenCallStatus

export type ProjectType = $Enums.ProjectType

export const ProjectType: typeof $Enums.ProjectType

export type JobType = $Enums.JobType

export const JobType: typeof $Enums.JobType

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type OfferType = $Enums.OfferType

export const OfferType: typeof $Enums.OfferType

export type OfferResponse = $Enums.OfferResponse

export const OfferResponse: typeof $Enums.OfferResponse

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.researcherProfile`: Exposes CRUD operations for the **ResearcherProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResearcherProfiles
    * const researcherProfiles = await prisma.researcherProfile.findMany()
    * ```
    */
  get researcherProfile(): Prisma.ResearcherProfileDelegate<ExtArgs>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs>;

  /**
   * `prisma.publication`: Exposes CRUD operations for the **Publication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publications
    * const publications = await prisma.publication.findMany()
    * ```
    */
  get publication(): Prisma.PublicationDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.proposal`: Exposes CRUD operations for the **Proposal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposals
    * const proposals = await prisma.proposal.findMany()
    * ```
    */
  get proposal(): Prisma.ProposalDelegate<ExtArgs>;

  /**
   * `prisma.university`: Exposes CRUD operations for the **University** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Universities
    * const universities = await prisma.university.findMany()
    * ```
    */
  get university(): Prisma.UniversityDelegate<ExtArgs>;

  /**
   * `prisma.universityProfile`: Exposes CRUD operations for the **UniversityProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UniversityProfiles
    * const universityProfiles = await prisma.universityProfile.findMany()
    * ```
    */
  get universityProfile(): Prisma.UniversityProfileDelegate<ExtArgs>;

  /**
   * `prisma.openCall`: Exposes CRUD operations for the **OpenCall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenCalls
    * const openCalls = await prisma.openCall.findMany()
    * ```
    */
  get openCall(): Prisma.OpenCallDelegate<ExtArgs>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ResearcherProfile: 'ResearcherProfile',
    Education: 'Education',
    Publication: 'Publication',
    Document: 'Document',
    Proposal: 'Proposal',
    University: 'University',
    UniversityProfile: 'UniversityProfile',
    OpenCall: 'OpenCall',
    Application: 'Application'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "researcherProfile" | "education" | "publication" | "document" | "proposal" | "university" | "universityProfile" | "openCall" | "application"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ResearcherProfile: {
        payload: Prisma.$ResearcherProfilePayload<ExtArgs>
        fields: Prisma.ResearcherProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResearcherProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResearcherProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          findFirst: {
            args: Prisma.ResearcherProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResearcherProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          findMany: {
            args: Prisma.ResearcherProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>[]
          }
          create: {
            args: Prisma.ResearcherProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          createMany: {
            args: Prisma.ResearcherProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResearcherProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>[]
          }
          delete: {
            args: Prisma.ResearcherProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          update: {
            args: Prisma.ResearcherProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          deleteMany: {
            args: Prisma.ResearcherProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResearcherProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResearcherProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearcherProfilePayload>
          }
          aggregate: {
            args: Prisma.ResearcherProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResearcherProfile>
          }
          groupBy: {
            args: Prisma.ResearcherProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResearcherProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResearcherProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ResearcherProfileCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EducationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Publication: {
        payload: Prisma.$PublicationPayload<ExtArgs>
        fields: Prisma.PublicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          findFirst: {
            args: Prisma.PublicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          findMany: {
            args: Prisma.PublicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>[]
          }
          create: {
            args: Prisma.PublicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          createMany: {
            args: Prisma.PublicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>[]
          }
          delete: {
            args: Prisma.PublicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          update: {
            args: Prisma.PublicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          deleteMany: {
            args: Prisma.PublicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationPayload>
          }
          aggregate: {
            args: Prisma.PublicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublication>
          }
          groupBy: {
            args: Prisma.PublicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicationCountArgs<ExtArgs>
            result: $Utils.Optional<PublicationCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Proposal: {
        payload: Prisma.$ProposalPayload<ExtArgs>
        fields: Prisma.ProposalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findFirst: {
            args: Prisma.ProposalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findMany: {
            args: Prisma.ProposalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          create: {
            args: Prisma.ProposalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          createMany: {
            args: Prisma.ProposalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProposalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          delete: {
            args: Prisma.ProposalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          update: {
            args: Prisma.ProposalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          deleteMany: {
            args: Prisma.ProposalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProposalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProposalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          aggregate: {
            args: Prisma.ProposalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProposal>
          }
          groupBy: {
            args: Prisma.ProposalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProposalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposalCountArgs<ExtArgs>
            result: $Utils.Optional<ProposalCountAggregateOutputType> | number
          }
        }
      }
      University: {
        payload: Prisma.$UniversityPayload<ExtArgs>
        fields: Prisma.UniversityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UniversityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UniversityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findFirst: {
            args: Prisma.UniversityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UniversityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findMany: {
            args: Prisma.UniversityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          create: {
            args: Prisma.UniversityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          createMany: {
            args: Prisma.UniversityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UniversityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          delete: {
            args: Prisma.UniversityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          update: {
            args: Prisma.UniversityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          deleteMany: {
            args: Prisma.UniversityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UniversityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UniversityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          aggregate: {
            args: Prisma.UniversityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUniversity>
          }
          groupBy: {
            args: Prisma.UniversityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UniversityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UniversityCountArgs<ExtArgs>
            result: $Utils.Optional<UniversityCountAggregateOutputType> | number
          }
        }
      }
      UniversityProfile: {
        payload: Prisma.$UniversityProfilePayload<ExtArgs>
        fields: Prisma.UniversityProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UniversityProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UniversityProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          findFirst: {
            args: Prisma.UniversityProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UniversityProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          findMany: {
            args: Prisma.UniversityProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>[]
          }
          create: {
            args: Prisma.UniversityProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          createMany: {
            args: Prisma.UniversityProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UniversityProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>[]
          }
          delete: {
            args: Prisma.UniversityProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          update: {
            args: Prisma.UniversityProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          deleteMany: {
            args: Prisma.UniversityProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UniversityProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UniversityProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityProfilePayload>
          }
          aggregate: {
            args: Prisma.UniversityProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUniversityProfile>
          }
          groupBy: {
            args: Prisma.UniversityProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UniversityProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UniversityProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UniversityProfileCountAggregateOutputType> | number
          }
        }
      }
      OpenCall: {
        payload: Prisma.$OpenCallPayload<ExtArgs>
        fields: Prisma.OpenCallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenCallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenCallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          findFirst: {
            args: Prisma.OpenCallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenCallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          findMany: {
            args: Prisma.OpenCallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>[]
          }
          create: {
            args: Prisma.OpenCallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          createMany: {
            args: Prisma.OpenCallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenCallCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>[]
          }
          delete: {
            args: Prisma.OpenCallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          update: {
            args: Prisma.OpenCallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          deleteMany: {
            args: Prisma.OpenCallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenCallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenCallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenCallPayload>
          }
          aggregate: {
            args: Prisma.OpenCallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenCall>
          }
          groupBy: {
            args: Prisma.OpenCallGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenCallGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenCallCountArgs<ExtArgs>
            result: $Utils.Optional<OpenCallCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ResearcherProfileCountOutputType
   */

  export type ResearcherProfileCountOutputType = {
    education: number
    publications: number
    documents: number
    proposals: number
    applications: number
  }

  export type ResearcherProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    education?: boolean | ResearcherProfileCountOutputTypeCountEducationArgs
    publications?: boolean | ResearcherProfileCountOutputTypeCountPublicationsArgs
    documents?: boolean | ResearcherProfileCountOutputTypeCountDocumentsArgs
    proposals?: boolean | ResearcherProfileCountOutputTypeCountProposalsArgs
    applications?: boolean | ResearcherProfileCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfileCountOutputType
     */
    select?: ResearcherProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeCountEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }

  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeCountPublicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicationWhereInput
  }

  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeCountProposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
  }

  /**
   * ResearcherProfileCountOutputType without action
   */
  export type ResearcherProfileCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type UniversityCountOutputType
   */

  export type UniversityCountOutputType = {
    profiles: number
  }

  export type UniversityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | UniversityCountOutputTypeCountProfilesArgs
  }

  // Custom InputTypes
  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityCountOutputType
     */
    select?: UniversityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityProfileWhereInput
  }


  /**
   * Count Type UniversityProfileCountOutputType
   */

  export type UniversityProfileCountOutputType = {
    openCalls: number
  }

  export type UniversityProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    openCalls?: boolean | UniversityProfileCountOutputTypeCountOpenCallsArgs
  }

  // Custom InputTypes
  /**
   * UniversityProfileCountOutputType without action
   */
  export type UniversityProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfileCountOutputType
     */
    select?: UniversityProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UniversityProfileCountOutputType without action
   */
  export type UniversityProfileCountOutputTypeCountOpenCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenCallWhereInput
  }


  /**
   * Count Type OpenCallCountOutputType
   */

  export type OpenCallCountOutputType = {
    applications: number
  }

  export type OpenCallCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | OpenCallCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * OpenCallCountOutputType without action
   */
  export type OpenCallCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCallCountOutputType
     */
    select?: OpenCallCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OpenCallCountOutputType without action
   */
  export type OpenCallCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    googleId: string | null
    linkedInId: string | null
    orcidId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    googleId: string | null
    linkedInId: string | null
    orcidId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    googleId: number
    linkedInId: number
    orcidId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    googleId?: true
    linkedInId?: true
    orcidId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    googleId?: true
    linkedInId?: true
    orcidId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    googleId?: true
    linkedInId?: true
    orcidId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    password: string | null
    googleId: string | null
    linkedInId: string | null
    orcidId: string | null
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    linkedInId?: boolean
    orcidId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherProfile?: boolean | User$researcherProfileArgs<ExtArgs>
    universityProfile?: boolean | User$universityProfileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    linkedInId?: boolean
    orcidId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    googleId?: boolean
    linkedInId?: boolean
    orcidId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | User$researcherProfileArgs<ExtArgs>
    universityProfile?: boolean | User$universityProfileArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      researcherProfile: Prisma.$ResearcherProfilePayload<ExtArgs> | null
      universityProfile: Prisma.$UniversityProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      password: string | null
      googleId: string | null
      linkedInId: string | null
      orcidId: string | null
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    researcherProfile<T extends User$researcherProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$researcherProfileArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    universityProfile<T extends User$universityProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$universityProfileArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly linkedInId: FieldRef<"User", 'String'>
    readonly orcidId: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.researcherProfile
   */
  export type User$researcherProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    where?: ResearcherProfileWhereInput
  }

  /**
   * User.universityProfile
   */
  export type User$universityProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    where?: UniversityProfileWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ResearcherProfile
   */

  export type AggregateResearcherProfile = {
    _count: ResearcherProfileCountAggregateOutputType | null
    _min: ResearcherProfileMinAggregateOutputType | null
    _max: ResearcherProfileMaxAggregateOutputType | null
  }

  export type ResearcherProfileMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    professionalTitle: string | null
    currentInstitution: string | null
    currentLocation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ResearcherProfileMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    professionalTitle: string | null
    currentInstitution: string | null
    currentLocation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ResearcherProfileCountAggregateOutputType = {
    id: number
    fullName: number
    professionalTitle: number
    currentInstitution: number
    currentLocation: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type ResearcherProfileMinAggregateInputType = {
    id?: true
    fullName?: true
    professionalTitle?: true
    currentInstitution?: true
    currentLocation?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ResearcherProfileMaxAggregateInputType = {
    id?: true
    fullName?: true
    professionalTitle?: true
    currentInstitution?: true
    currentLocation?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ResearcherProfileCountAggregateInputType = {
    id?: true
    fullName?: true
    professionalTitle?: true
    currentInstitution?: true
    currentLocation?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type ResearcherProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResearcherProfile to aggregate.
     */
    where?: ResearcherProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearcherProfiles to fetch.
     */
    orderBy?: ResearcherProfileOrderByWithRelationInput | ResearcherProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResearcherProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearcherProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearcherProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResearcherProfiles
    **/
    _count?: true | ResearcherProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResearcherProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResearcherProfileMaxAggregateInputType
  }

  export type GetResearcherProfileAggregateType<T extends ResearcherProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateResearcherProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResearcherProfile[P]>
      : GetScalarType<T[P], AggregateResearcherProfile[P]>
  }




  export type ResearcherProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearcherProfileWhereInput
    orderBy?: ResearcherProfileOrderByWithAggregationInput | ResearcherProfileOrderByWithAggregationInput[]
    by: ResearcherProfileScalarFieldEnum[] | ResearcherProfileScalarFieldEnum
    having?: ResearcherProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResearcherProfileCountAggregateInputType | true
    _min?: ResearcherProfileMinAggregateInputType
    _max?: ResearcherProfileMaxAggregateInputType
  }

  export type ResearcherProfileGroupByOutputType = {
    id: string
    fullName: string
    professionalTitle: string | null
    currentInstitution: string | null
    currentLocation: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: ResearcherProfileCountAggregateOutputType | null
    _min: ResearcherProfileMinAggregateOutputType | null
    _max: ResearcherProfileMaxAggregateOutputType | null
  }

  type GetResearcherProfileGroupByPayload<T extends ResearcherProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResearcherProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResearcherProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResearcherProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ResearcherProfileGroupByOutputType[P]>
        }
      >
    >


  export type ResearcherProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    professionalTitle?: boolean
    currentInstitution?: boolean
    currentLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | ResearcherProfile$educationArgs<ExtArgs>
    publications?: boolean | ResearcherProfile$publicationsArgs<ExtArgs>
    documents?: boolean | ResearcherProfile$documentsArgs<ExtArgs>
    proposals?: boolean | ResearcherProfile$proposalsArgs<ExtArgs>
    applications?: boolean | ResearcherProfile$applicationsArgs<ExtArgs>
    _count?: boolean | ResearcherProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["researcherProfile"]>

  export type ResearcherProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    professionalTitle?: boolean
    currentInstitution?: boolean
    currentLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["researcherProfile"]>

  export type ResearcherProfileSelectScalar = {
    id?: boolean
    fullName?: boolean
    professionalTitle?: boolean
    currentInstitution?: boolean
    currentLocation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type ResearcherProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | ResearcherProfile$educationArgs<ExtArgs>
    publications?: boolean | ResearcherProfile$publicationsArgs<ExtArgs>
    documents?: boolean | ResearcherProfile$documentsArgs<ExtArgs>
    proposals?: boolean | ResearcherProfile$proposalsArgs<ExtArgs>
    applications?: boolean | ResearcherProfile$applicationsArgs<ExtArgs>
    _count?: boolean | ResearcherProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResearcherProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResearcherProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResearcherProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      education: Prisma.$EducationPayload<ExtArgs>[]
      publications: Prisma.$PublicationPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      proposals: Prisma.$ProposalPayload<ExtArgs>[]
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      professionalTitle: string | null
      currentInstitution: string | null
      currentLocation: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["researcherProfile"]>
    composites: {}
  }

  type ResearcherProfileGetPayload<S extends boolean | null | undefined | ResearcherProfileDefaultArgs> = $Result.GetResult<Prisma.$ResearcherProfilePayload, S>

  type ResearcherProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResearcherProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResearcherProfileCountAggregateInputType | true
    }

  export interface ResearcherProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResearcherProfile'], meta: { name: 'ResearcherProfile' } }
    /**
     * Find zero or one ResearcherProfile that matches the filter.
     * @param {ResearcherProfileFindUniqueArgs} args - Arguments to find a ResearcherProfile
     * @example
     * // Get one ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResearcherProfileFindUniqueArgs>(args: SelectSubset<T, ResearcherProfileFindUniqueArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ResearcherProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResearcherProfileFindUniqueOrThrowArgs} args - Arguments to find a ResearcherProfile
     * @example
     * // Get one ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResearcherProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ResearcherProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ResearcherProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileFindFirstArgs} args - Arguments to find a ResearcherProfile
     * @example
     * // Get one ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResearcherProfileFindFirstArgs>(args?: SelectSubset<T, ResearcherProfileFindFirstArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ResearcherProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileFindFirstOrThrowArgs} args - Arguments to find a ResearcherProfile
     * @example
     * // Get one ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResearcherProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ResearcherProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ResearcherProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResearcherProfiles
     * const researcherProfiles = await prisma.researcherProfile.findMany()
     * 
     * // Get first 10 ResearcherProfiles
     * const researcherProfiles = await prisma.researcherProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const researcherProfileWithIdOnly = await prisma.researcherProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResearcherProfileFindManyArgs>(args?: SelectSubset<T, ResearcherProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ResearcherProfile.
     * @param {ResearcherProfileCreateArgs} args - Arguments to create a ResearcherProfile.
     * @example
     * // Create one ResearcherProfile
     * const ResearcherProfile = await prisma.researcherProfile.create({
     *   data: {
     *     // ... data to create a ResearcherProfile
     *   }
     * })
     * 
     */
    create<T extends ResearcherProfileCreateArgs>(args: SelectSubset<T, ResearcherProfileCreateArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ResearcherProfiles.
     * @param {ResearcherProfileCreateManyArgs} args - Arguments to create many ResearcherProfiles.
     * @example
     * // Create many ResearcherProfiles
     * const researcherProfile = await prisma.researcherProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResearcherProfileCreateManyArgs>(args?: SelectSubset<T, ResearcherProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResearcherProfiles and returns the data saved in the database.
     * @param {ResearcherProfileCreateManyAndReturnArgs} args - Arguments to create many ResearcherProfiles.
     * @example
     * // Create many ResearcherProfiles
     * const researcherProfile = await prisma.researcherProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResearcherProfiles and only return the `id`
     * const researcherProfileWithIdOnly = await prisma.researcherProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResearcherProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ResearcherProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ResearcherProfile.
     * @param {ResearcherProfileDeleteArgs} args - Arguments to delete one ResearcherProfile.
     * @example
     * // Delete one ResearcherProfile
     * const ResearcherProfile = await prisma.researcherProfile.delete({
     *   where: {
     *     // ... filter to delete one ResearcherProfile
     *   }
     * })
     * 
     */
    delete<T extends ResearcherProfileDeleteArgs>(args: SelectSubset<T, ResearcherProfileDeleteArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ResearcherProfile.
     * @param {ResearcherProfileUpdateArgs} args - Arguments to update one ResearcherProfile.
     * @example
     * // Update one ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResearcherProfileUpdateArgs>(args: SelectSubset<T, ResearcherProfileUpdateArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ResearcherProfiles.
     * @param {ResearcherProfileDeleteManyArgs} args - Arguments to filter ResearcherProfiles to delete.
     * @example
     * // Delete a few ResearcherProfiles
     * const { count } = await prisma.researcherProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResearcherProfileDeleteManyArgs>(args?: SelectSubset<T, ResearcherProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResearcherProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResearcherProfiles
     * const researcherProfile = await prisma.researcherProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResearcherProfileUpdateManyArgs>(args: SelectSubset<T, ResearcherProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResearcherProfile.
     * @param {ResearcherProfileUpsertArgs} args - Arguments to update or create a ResearcherProfile.
     * @example
     * // Update or create a ResearcherProfile
     * const researcherProfile = await prisma.researcherProfile.upsert({
     *   create: {
     *     // ... data to create a ResearcherProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResearcherProfile we want to update
     *   }
     * })
     */
    upsert<T extends ResearcherProfileUpsertArgs>(args: SelectSubset<T, ResearcherProfileUpsertArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ResearcherProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileCountArgs} args - Arguments to filter ResearcherProfiles to count.
     * @example
     * // Count the number of ResearcherProfiles
     * const count = await prisma.researcherProfile.count({
     *   where: {
     *     // ... the filter for the ResearcherProfiles we want to count
     *   }
     * })
    **/
    count<T extends ResearcherProfileCountArgs>(
      args?: Subset<T, ResearcherProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResearcherProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResearcherProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResearcherProfileAggregateArgs>(args: Subset<T, ResearcherProfileAggregateArgs>): Prisma.PrismaPromise<GetResearcherProfileAggregateType<T>>

    /**
     * Group by ResearcherProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearcherProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResearcherProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResearcherProfileGroupByArgs['orderBy'] }
        : { orderBy?: ResearcherProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResearcherProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResearcherProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResearcherProfile model
   */
  readonly fields: ResearcherProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResearcherProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResearcherProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    education<T extends ResearcherProfile$educationArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfile$educationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany"> | Null>
    publications<T extends ResearcherProfile$publicationsArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfile$publicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends ResearcherProfile$documentsArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfile$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    proposals<T extends ResearcherProfile$proposalsArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfile$proposalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany"> | Null>
    applications<T extends ResearcherProfile$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfile$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResearcherProfile model
   */ 
  interface ResearcherProfileFieldRefs {
    readonly id: FieldRef<"ResearcherProfile", 'String'>
    readonly fullName: FieldRef<"ResearcherProfile", 'String'>
    readonly professionalTitle: FieldRef<"ResearcherProfile", 'String'>
    readonly currentInstitution: FieldRef<"ResearcherProfile", 'String'>
    readonly currentLocation: FieldRef<"ResearcherProfile", 'String'>
    readonly createdAt: FieldRef<"ResearcherProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"ResearcherProfile", 'DateTime'>
    readonly userId: FieldRef<"ResearcherProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ResearcherProfile findUnique
   */
  export type ResearcherProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResearcherProfile to fetch.
     */
    where: ResearcherProfileWhereUniqueInput
  }

  /**
   * ResearcherProfile findUniqueOrThrow
   */
  export type ResearcherProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResearcherProfile to fetch.
     */
    where: ResearcherProfileWhereUniqueInput
  }

  /**
   * ResearcherProfile findFirst
   */
  export type ResearcherProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResearcherProfile to fetch.
     */
    where?: ResearcherProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearcherProfiles to fetch.
     */
    orderBy?: ResearcherProfileOrderByWithRelationInput | ResearcherProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResearcherProfiles.
     */
    cursor?: ResearcherProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearcherProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearcherProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResearcherProfiles.
     */
    distinct?: ResearcherProfileScalarFieldEnum | ResearcherProfileScalarFieldEnum[]
  }

  /**
   * ResearcherProfile findFirstOrThrow
   */
  export type ResearcherProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResearcherProfile to fetch.
     */
    where?: ResearcherProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearcherProfiles to fetch.
     */
    orderBy?: ResearcherProfileOrderByWithRelationInput | ResearcherProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResearcherProfiles.
     */
    cursor?: ResearcherProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearcherProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearcherProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResearcherProfiles.
     */
    distinct?: ResearcherProfileScalarFieldEnum | ResearcherProfileScalarFieldEnum[]
  }

  /**
   * ResearcherProfile findMany
   */
  export type ResearcherProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResearcherProfiles to fetch.
     */
    where?: ResearcherProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearcherProfiles to fetch.
     */
    orderBy?: ResearcherProfileOrderByWithRelationInput | ResearcherProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResearcherProfiles.
     */
    cursor?: ResearcherProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearcherProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearcherProfiles.
     */
    skip?: number
    distinct?: ResearcherProfileScalarFieldEnum | ResearcherProfileScalarFieldEnum[]
  }

  /**
   * ResearcherProfile create
   */
  export type ResearcherProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ResearcherProfile.
     */
    data: XOR<ResearcherProfileCreateInput, ResearcherProfileUncheckedCreateInput>
  }

  /**
   * ResearcherProfile createMany
   */
  export type ResearcherProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResearcherProfiles.
     */
    data: ResearcherProfileCreateManyInput | ResearcherProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResearcherProfile createManyAndReturn
   */
  export type ResearcherProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ResearcherProfiles.
     */
    data: ResearcherProfileCreateManyInput | ResearcherProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResearcherProfile update
   */
  export type ResearcherProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ResearcherProfile.
     */
    data: XOR<ResearcherProfileUpdateInput, ResearcherProfileUncheckedUpdateInput>
    /**
     * Choose, which ResearcherProfile to update.
     */
    where: ResearcherProfileWhereUniqueInput
  }

  /**
   * ResearcherProfile updateMany
   */
  export type ResearcherProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResearcherProfiles.
     */
    data: XOR<ResearcherProfileUpdateManyMutationInput, ResearcherProfileUncheckedUpdateManyInput>
    /**
     * Filter which ResearcherProfiles to update
     */
    where?: ResearcherProfileWhereInput
  }

  /**
   * ResearcherProfile upsert
   */
  export type ResearcherProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ResearcherProfile to update in case it exists.
     */
    where: ResearcherProfileWhereUniqueInput
    /**
     * In case the ResearcherProfile found by the `where` argument doesn't exist, create a new ResearcherProfile with this data.
     */
    create: XOR<ResearcherProfileCreateInput, ResearcherProfileUncheckedCreateInput>
    /**
     * In case the ResearcherProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResearcherProfileUpdateInput, ResearcherProfileUncheckedUpdateInput>
  }

  /**
   * ResearcherProfile delete
   */
  export type ResearcherProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
    /**
     * Filter which ResearcherProfile to delete.
     */
    where: ResearcherProfileWhereUniqueInput
  }

  /**
   * ResearcherProfile deleteMany
   */
  export type ResearcherProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResearcherProfiles to delete
     */
    where?: ResearcherProfileWhereInput
  }

  /**
   * ResearcherProfile.education
   */
  export type ResearcherProfile$educationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * ResearcherProfile.publications
   */
  export type ResearcherProfile$publicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    where?: PublicationWhereInput
    orderBy?: PublicationOrderByWithRelationInput | PublicationOrderByWithRelationInput[]
    cursor?: PublicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicationScalarFieldEnum | PublicationScalarFieldEnum[]
  }

  /**
   * ResearcherProfile.documents
   */
  export type ResearcherProfile$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * ResearcherProfile.proposals
   */
  export type ResearcherProfile$proposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    cursor?: ProposalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * ResearcherProfile.applications
   */
  export type ResearcherProfile$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * ResearcherProfile without action
   */
  export type ResearcherProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearcherProfile
     */
    select?: ResearcherProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearcherProfileInclude<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationMinAggregateOutputType = {
    id: string | null
    degree: string | null
    fieldOfStudy: string | null
    institution: string | null
    country: string | null
    startDate: Date | null
    endDate: Date | null
    researcherProfileId: string | null
  }

  export type EducationMaxAggregateOutputType = {
    id: string | null
    degree: string | null
    fieldOfStudy: string | null
    institution: string | null
    country: string | null
    startDate: Date | null
    endDate: Date | null
    researcherProfileId: string | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    degree: number
    fieldOfStudy: number
    institution: number
    country: number
    startDate: number
    endDate: number
    researcherProfileId: number
    _all: number
  }


  export type EducationMinAggregateInputType = {
    id?: true
    degree?: true
    fieldOfStudy?: true
    institution?: true
    country?: true
    startDate?: true
    endDate?: true
    researcherProfileId?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    degree?: true
    fieldOfStudy?: true
    institution?: true
    country?: true
    startDate?: true
    endDate?: true
    researcherProfileId?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    degree?: true
    fieldOfStudy?: true
    institution?: true
    country?: true
    startDate?: true
    endDate?: true
    researcherProfileId?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date
    endDate: Date | null
    researcherProfileId: string
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    degree?: boolean
    fieldOfStudy?: boolean
    institution?: boolean
    country?: boolean
    startDate?: boolean
    endDate?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    degree?: boolean
    fieldOfStudy?: boolean
    institution?: boolean
    country?: boolean
    startDate?: boolean
    endDate?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectScalar = {
    id?: boolean
    degree?: boolean
    fieldOfStudy?: boolean
    institution?: boolean
    country?: boolean
    startDate?: boolean
    endDate?: boolean
    researcherProfileId?: boolean
  }

  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }
  export type EducationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      researcherProfile: Prisma.$ResearcherProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      degree: string
      fieldOfStudy: string
      institution: string
      country: string
      startDate: Date
      endDate: Date | null
      researcherProfileId: string
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Educations and returns the data saved in the database.
     * @param {EducationCreateManyAndReturnArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Educations and only return the `id`
     * const educationWithIdOnly = await prisma.education.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EducationCreateManyAndReturnArgs>(args?: SelectSubset<T, EducationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    researcherProfile<T extends ResearcherProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfileDefaultArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */ 
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'String'>
    readonly degree: FieldRef<"Education", 'String'>
    readonly fieldOfStudy: FieldRef<"Education", 'String'>
    readonly institution: FieldRef<"Education", 'String'>
    readonly country: FieldRef<"Education", 'String'>
    readonly startDate: FieldRef<"Education", 'DateTime'>
    readonly endDate: FieldRef<"Education", 'DateTime'>
    readonly researcherProfileId: FieldRef<"Education", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Education createManyAndReturn
   */
  export type EducationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
  }


  /**
   * Model Publication
   */

  export type AggregatePublication = {
    _count: PublicationCountAggregateOutputType | null
    _avg: PublicationAvgAggregateOutputType | null
    _sum: PublicationSumAggregateOutputType | null
    _min: PublicationMinAggregateOutputType | null
    _max: PublicationMaxAggregateOutputType | null
  }

  export type PublicationAvgAggregateOutputType = {
    year: number | null
  }

  export type PublicationSumAggregateOutputType = {
    year: number | null
  }

  export type PublicationMinAggregateOutputType = {
    id: string | null
    title: string | null
    journal: string | null
    year: number | null
    link: string | null
    researcherProfileId: string | null
  }

  export type PublicationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    journal: string | null
    year: number | null
    link: string | null
    researcherProfileId: string | null
  }

  export type PublicationCountAggregateOutputType = {
    id: number
    title: number
    journal: number
    year: number
    link: number
    researcherProfileId: number
    _all: number
  }


  export type PublicationAvgAggregateInputType = {
    year?: true
  }

  export type PublicationSumAggregateInputType = {
    year?: true
  }

  export type PublicationMinAggregateInputType = {
    id?: true
    title?: true
    journal?: true
    year?: true
    link?: true
    researcherProfileId?: true
  }

  export type PublicationMaxAggregateInputType = {
    id?: true
    title?: true
    journal?: true
    year?: true
    link?: true
    researcherProfileId?: true
  }

  export type PublicationCountAggregateInputType = {
    id?: true
    title?: true
    journal?: true
    year?: true
    link?: true
    researcherProfileId?: true
    _all?: true
  }

  export type PublicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publication to aggregate.
     */
    where?: PublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publications to fetch.
     */
    orderBy?: PublicationOrderByWithRelationInput | PublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Publications
    **/
    _count?: true | PublicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicationMaxAggregateInputType
  }

  export type GetPublicationAggregateType<T extends PublicationAggregateArgs> = {
        [P in keyof T & keyof AggregatePublication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublication[P]>
      : GetScalarType<T[P], AggregatePublication[P]>
  }




  export type PublicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicationWhereInput
    orderBy?: PublicationOrderByWithAggregationInput | PublicationOrderByWithAggregationInput[]
    by: PublicationScalarFieldEnum[] | PublicationScalarFieldEnum
    having?: PublicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicationCountAggregateInputType | true
    _avg?: PublicationAvgAggregateInputType
    _sum?: PublicationSumAggregateInputType
    _min?: PublicationMinAggregateInputType
    _max?: PublicationMaxAggregateInputType
  }

  export type PublicationGroupByOutputType = {
    id: string
    title: string
    journal: string | null
    year: number
    link: string | null
    researcherProfileId: string
    _count: PublicationCountAggregateOutputType | null
    _avg: PublicationAvgAggregateOutputType | null
    _sum: PublicationSumAggregateOutputType | null
    _min: PublicationMinAggregateOutputType | null
    _max: PublicationMaxAggregateOutputType | null
  }

  type GetPublicationGroupByPayload<T extends PublicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicationGroupByOutputType[P]>
            : GetScalarType<T[P], PublicationGroupByOutputType[P]>
        }
      >
    >


  export type PublicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    journal?: boolean
    year?: boolean
    link?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publication"]>

  export type PublicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    journal?: boolean
    year?: boolean
    link?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publication"]>

  export type PublicationSelectScalar = {
    id?: boolean
    title?: boolean
    journal?: boolean
    year?: boolean
    link?: boolean
    researcherProfileId?: boolean
  }

  export type PublicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }
  export type PublicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }

  export type $PublicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Publication"
    objects: {
      researcherProfile: Prisma.$ResearcherProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      journal: string | null
      year: number
      link: string | null
      researcherProfileId: string
    }, ExtArgs["result"]["publication"]>
    composites: {}
  }

  type PublicationGetPayload<S extends boolean | null | undefined | PublicationDefaultArgs> = $Result.GetResult<Prisma.$PublicationPayload, S>

  type PublicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicationCountAggregateInputType | true
    }

  export interface PublicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Publication'], meta: { name: 'Publication' } }
    /**
     * Find zero or one Publication that matches the filter.
     * @param {PublicationFindUniqueArgs} args - Arguments to find a Publication
     * @example
     * // Get one Publication
     * const publication = await prisma.publication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublicationFindUniqueArgs>(args: SelectSubset<T, PublicationFindUniqueArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Publication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicationFindUniqueOrThrowArgs} args - Arguments to find a Publication
     * @example
     * // Get one Publication
     * const publication = await prisma.publication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublicationFindUniqueOrThrowArgs>(args: SelectSubset<T, PublicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Publication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationFindFirstArgs} args - Arguments to find a Publication
     * @example
     * // Get one Publication
     * const publication = await prisma.publication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublicationFindFirstArgs>(args?: SelectSubset<T, PublicationFindFirstArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Publication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationFindFirstOrThrowArgs} args - Arguments to find a Publication
     * @example
     * // Get one Publication
     * const publication = await prisma.publication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublicationFindFirstOrThrowArgs>(args?: SelectSubset<T, PublicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Publications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publications
     * const publications = await prisma.publication.findMany()
     * 
     * // Get first 10 Publications
     * const publications = await prisma.publication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicationWithIdOnly = await prisma.publication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublicationFindManyArgs>(args?: SelectSubset<T, PublicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Publication.
     * @param {PublicationCreateArgs} args - Arguments to create a Publication.
     * @example
     * // Create one Publication
     * const Publication = await prisma.publication.create({
     *   data: {
     *     // ... data to create a Publication
     *   }
     * })
     * 
     */
    create<T extends PublicationCreateArgs>(args: SelectSubset<T, PublicationCreateArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Publications.
     * @param {PublicationCreateManyArgs} args - Arguments to create many Publications.
     * @example
     * // Create many Publications
     * const publication = await prisma.publication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublicationCreateManyArgs>(args?: SelectSubset<T, PublicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Publications and returns the data saved in the database.
     * @param {PublicationCreateManyAndReturnArgs} args - Arguments to create many Publications.
     * @example
     * // Create many Publications
     * const publication = await prisma.publication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Publications and only return the `id`
     * const publicationWithIdOnly = await prisma.publication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublicationCreateManyAndReturnArgs>(args?: SelectSubset<T, PublicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Publication.
     * @param {PublicationDeleteArgs} args - Arguments to delete one Publication.
     * @example
     * // Delete one Publication
     * const Publication = await prisma.publication.delete({
     *   where: {
     *     // ... filter to delete one Publication
     *   }
     * })
     * 
     */
    delete<T extends PublicationDeleteArgs>(args: SelectSubset<T, PublicationDeleteArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Publication.
     * @param {PublicationUpdateArgs} args - Arguments to update one Publication.
     * @example
     * // Update one Publication
     * const publication = await prisma.publication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublicationUpdateArgs>(args: SelectSubset<T, PublicationUpdateArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Publications.
     * @param {PublicationDeleteManyArgs} args - Arguments to filter Publications to delete.
     * @example
     * // Delete a few Publications
     * const { count } = await prisma.publication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublicationDeleteManyArgs>(args?: SelectSubset<T, PublicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publications
     * const publication = await prisma.publication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublicationUpdateManyArgs>(args: SelectSubset<T, PublicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publication.
     * @param {PublicationUpsertArgs} args - Arguments to update or create a Publication.
     * @example
     * // Update or create a Publication
     * const publication = await prisma.publication.upsert({
     *   create: {
     *     // ... data to create a Publication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publication we want to update
     *   }
     * })
     */
    upsert<T extends PublicationUpsertArgs>(args: SelectSubset<T, PublicationUpsertArgs<ExtArgs>>): Prisma__PublicationClient<$Result.GetResult<Prisma.$PublicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Publications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationCountArgs} args - Arguments to filter Publications to count.
     * @example
     * // Count the number of Publications
     * const count = await prisma.publication.count({
     *   where: {
     *     // ... the filter for the Publications we want to count
     *   }
     * })
    **/
    count<T extends PublicationCountArgs>(
      args?: Subset<T, PublicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicationAggregateArgs>(args: Subset<T, PublicationAggregateArgs>): Prisma.PrismaPromise<GetPublicationAggregateType<T>>

    /**
     * Group by Publication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicationGroupByArgs['orderBy'] }
        : { orderBy?: PublicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Publication model
   */
  readonly fields: PublicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Publication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    researcherProfile<T extends ResearcherProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfileDefaultArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Publication model
   */ 
  interface PublicationFieldRefs {
    readonly id: FieldRef<"Publication", 'String'>
    readonly title: FieldRef<"Publication", 'String'>
    readonly journal: FieldRef<"Publication", 'String'>
    readonly year: FieldRef<"Publication", 'Int'>
    readonly link: FieldRef<"Publication", 'String'>
    readonly researcherProfileId: FieldRef<"Publication", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Publication findUnique
   */
  export type PublicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter, which Publication to fetch.
     */
    where: PublicationWhereUniqueInput
  }

  /**
   * Publication findUniqueOrThrow
   */
  export type PublicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter, which Publication to fetch.
     */
    where: PublicationWhereUniqueInput
  }

  /**
   * Publication findFirst
   */
  export type PublicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter, which Publication to fetch.
     */
    where?: PublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publications to fetch.
     */
    orderBy?: PublicationOrderByWithRelationInput | PublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publications.
     */
    cursor?: PublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publications.
     */
    distinct?: PublicationScalarFieldEnum | PublicationScalarFieldEnum[]
  }

  /**
   * Publication findFirstOrThrow
   */
  export type PublicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter, which Publication to fetch.
     */
    where?: PublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publications to fetch.
     */
    orderBy?: PublicationOrderByWithRelationInput | PublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publications.
     */
    cursor?: PublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publications.
     */
    distinct?: PublicationScalarFieldEnum | PublicationScalarFieldEnum[]
  }

  /**
   * Publication findMany
   */
  export type PublicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter, which Publications to fetch.
     */
    where?: PublicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publications to fetch.
     */
    orderBy?: PublicationOrderByWithRelationInput | PublicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Publications.
     */
    cursor?: PublicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publications.
     */
    skip?: number
    distinct?: PublicationScalarFieldEnum | PublicationScalarFieldEnum[]
  }

  /**
   * Publication create
   */
  export type PublicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Publication.
     */
    data: XOR<PublicationCreateInput, PublicationUncheckedCreateInput>
  }

  /**
   * Publication createMany
   */
  export type PublicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Publications.
     */
    data: PublicationCreateManyInput | PublicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Publication createManyAndReturn
   */
  export type PublicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Publications.
     */
    data: PublicationCreateManyInput | PublicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Publication update
   */
  export type PublicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Publication.
     */
    data: XOR<PublicationUpdateInput, PublicationUncheckedUpdateInput>
    /**
     * Choose, which Publication to update.
     */
    where: PublicationWhereUniqueInput
  }

  /**
   * Publication updateMany
   */
  export type PublicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Publications.
     */
    data: XOR<PublicationUpdateManyMutationInput, PublicationUncheckedUpdateManyInput>
    /**
     * Filter which Publications to update
     */
    where?: PublicationWhereInput
  }

  /**
   * Publication upsert
   */
  export type PublicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Publication to update in case it exists.
     */
    where: PublicationWhereUniqueInput
    /**
     * In case the Publication found by the `where` argument doesn't exist, create a new Publication with this data.
     */
    create: XOR<PublicationCreateInput, PublicationUncheckedCreateInput>
    /**
     * In case the Publication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicationUpdateInput, PublicationUncheckedUpdateInput>
  }

  /**
   * Publication delete
   */
  export type PublicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
    /**
     * Filter which Publication to delete.
     */
    where: PublicationWhereUniqueInput
  }

  /**
   * Publication deleteMany
   */
  export type PublicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publications to delete
     */
    where?: PublicationWhereInput
  }

  /**
   * Publication without action
   */
  export type PublicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publication
     */
    select?: PublicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    type: $Enums.DocumentType | null
    researcherProfileId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    type: $Enums.DocumentType | null
    researcherProfileId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    url: number
    type: number
    researcherProfileId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    researcherProfileId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    researcherProfileId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    researcherProfileId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    name: string
    url: string
    type: $Enums.DocumentType
    researcherProfileId: string
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    researcherProfileId?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      researcherProfile: Prisma.$ResearcherProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      type: $Enums.DocumentType
      researcherProfileId: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    researcherProfile<T extends ResearcherProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfileDefaultArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly name: FieldRef<"Document", 'String'>
    readonly url: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'DocumentType'>
    readonly researcherProfileId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Proposal
   */

  export type AggregateProposal = {
    _count: ProposalCountAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  export type ProposalMinAggregateOutputType = {
    id: string | null
    title: string | null
    isFinal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherProfileId: string | null
  }

  export type ProposalMaxAggregateOutputType = {
    id: string | null
    title: string | null
    isFinal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    researcherProfileId: string | null
  }

  export type ProposalCountAggregateOutputType = {
    id: number
    title: number
    content: number
    isFinal: number
    createdAt: number
    updatedAt: number
    researcherProfileId: number
    _all: number
  }


  export type ProposalMinAggregateInputType = {
    id?: true
    title?: true
    isFinal?: true
    createdAt?: true
    updatedAt?: true
    researcherProfileId?: true
  }

  export type ProposalMaxAggregateInputType = {
    id?: true
    title?: true
    isFinal?: true
    createdAt?: true
    updatedAt?: true
    researcherProfileId?: true
  }

  export type ProposalCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isFinal?: true
    createdAt?: true
    updatedAt?: true
    researcherProfileId?: true
    _all?: true
  }

  export type ProposalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposal to aggregate.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposals
    **/
    _count?: true | ProposalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalMaxAggregateInputType
  }

  export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
        [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposal[P]>
      : GetScalarType<T[P], AggregateProposal[P]>
  }




  export type ProposalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithAggregationInput | ProposalOrderByWithAggregationInput[]
    by: ProposalScalarFieldEnum[] | ProposalScalarFieldEnum
    having?: ProposalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalCountAggregateInputType | true
    _min?: ProposalMinAggregateInputType
    _max?: ProposalMaxAggregateInputType
  }

  export type ProposalGroupByOutputType = {
    id: string
    title: string
    content: JsonValue
    isFinal: boolean
    createdAt: Date
    updatedAt: Date
    researcherProfileId: string
    _count: ProposalCountAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalGroupByOutputType[P]>
        }
      >
    >


  export type ProposalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isFinal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    application?: boolean | Proposal$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isFinal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherProfileId?: boolean
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    isFinal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    researcherProfileId?: boolean
  }

  export type ProposalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    application?: boolean | Proposal$applicationArgs<ExtArgs>
  }
  export type ProposalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    researcherProfile?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
  }

  export type $ProposalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proposal"
    objects: {
      researcherProfile: Prisma.$ResearcherProfilePayload<ExtArgs>
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: Prisma.JsonValue
      isFinal: boolean
      createdAt: Date
      updatedAt: Date
      researcherProfileId: string
    }, ExtArgs["result"]["proposal"]>
    composites: {}
  }

  type ProposalGetPayload<S extends boolean | null | undefined | ProposalDefaultArgs> = $Result.GetResult<Prisma.$ProposalPayload, S>

  type ProposalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProposalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProposalCountAggregateInputType | true
    }

  export interface ProposalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposal'], meta: { name: 'Proposal' } }
    /**
     * Find zero or one Proposal that matches the filter.
     * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProposalFindUniqueArgs>(args: SelectSubset<T, ProposalFindUniqueArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Proposal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProposalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Proposal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProposalFindFirstArgs>(args?: SelectSubset<T, ProposalFindFirstArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Proposal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProposalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Proposals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposals
     * const proposals = await prisma.proposal.findMany()
     * 
     * // Get first 10 Proposals
     * const proposals = await prisma.proposal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProposalFindManyArgs>(args?: SelectSubset<T, ProposalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Proposal.
     * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
     * @example
     * // Create one Proposal
     * const Proposal = await prisma.proposal.create({
     *   data: {
     *     // ... data to create a Proposal
     *   }
     * })
     * 
     */
    create<T extends ProposalCreateArgs>(args: SelectSubset<T, ProposalCreateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Proposals.
     * @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProposalCreateManyArgs>(args?: SelectSubset<T, ProposalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proposals and returns the data saved in the database.
     * @param {ProposalCreateManyAndReturnArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proposals and only return the `id`
     * const proposalWithIdOnly = await prisma.proposal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProposalCreateManyAndReturnArgs>(args?: SelectSubset<T, ProposalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Proposal.
     * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
     * @example
     * // Delete one Proposal
     * const Proposal = await prisma.proposal.delete({
     *   where: {
     *     // ... filter to delete one Proposal
     *   }
     * })
     * 
     */
    delete<T extends ProposalDeleteArgs>(args: SelectSubset<T, ProposalDeleteArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Proposal.
     * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
     * @example
     * // Update one Proposal
     * const proposal = await prisma.proposal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProposalUpdateArgs>(args: SelectSubset<T, ProposalUpdateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Proposals.
     * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
     * @example
     * // Delete a few Proposals
     * const { count } = await prisma.proposal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProposalDeleteManyArgs>(args?: SelectSubset<T, ProposalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposals
     * const proposal = await prisma.proposal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProposalUpdateManyArgs>(args: SelectSubset<T, ProposalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposal.
     * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
     * @example
     * // Update or create a Proposal
     * const proposal = await prisma.proposal.upsert({
     *   create: {
     *     // ... data to create a Proposal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposal we want to update
     *   }
     * })
     */
    upsert<T extends ProposalUpsertArgs>(args: SelectSubset<T, ProposalUpsertArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
     * @example
     * // Count the number of Proposals
     * const count = await prisma.proposal.count({
     *   where: {
     *     // ... the filter for the Proposals we want to count
     *   }
     * })
    **/
    count<T extends ProposalCountArgs>(
      args?: Subset<T, ProposalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalAggregateArgs>(args: Subset<T, ProposalAggregateArgs>): Prisma.PrismaPromise<GetProposalAggregateType<T>>

    /**
     * Group by Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalGroupByArgs['orderBy'] }
        : { orderBy?: ProposalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposal model
   */
  readonly fields: ProposalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProposalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    researcherProfile<T extends ResearcherProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfileDefaultArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    application<T extends Proposal$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proposal model
   */ 
  interface ProposalFieldRefs {
    readonly id: FieldRef<"Proposal", 'String'>
    readonly title: FieldRef<"Proposal", 'String'>
    readonly content: FieldRef<"Proposal", 'Json'>
    readonly isFinal: FieldRef<"Proposal", 'Boolean'>
    readonly createdAt: FieldRef<"Proposal", 'DateTime'>
    readonly updatedAt: FieldRef<"Proposal", 'DateTime'>
    readonly researcherProfileId: FieldRef<"Proposal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Proposal findUnique
   */
  export type ProposalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findUniqueOrThrow
   */
  export type ProposalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findFirst
   */
  export type ProposalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findFirstOrThrow
   */
  export type ProposalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findMany
   */
  export type ProposalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposals to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal create
   */
  export type ProposalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to create a Proposal.
     */
    data: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
  }

  /**
   * Proposal createMany
   */
  export type ProposalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proposal createManyAndReturn
   */
  export type ProposalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proposal update
   */
  export type ProposalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to update a Proposal.
     */
    data: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
    /**
     * Choose, which Proposal to update.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal updateMany
   */
  export type ProposalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proposals.
     */
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyInput>
    /**
     * Filter which Proposals to update
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal upsert
   */
  export type ProposalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The filter to search for the Proposal to update in case it exists.
     */
    where: ProposalWhereUniqueInput
    /**
     * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
     */
    create: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
    /**
     * In case the Proposal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
  }

  /**
   * Proposal delete
   */
  export type ProposalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter which Proposal to delete.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal deleteMany
   */
  export type ProposalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposals to delete
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal.application
   */
  export type Proposal$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }

  /**
   * Proposal without action
   */
  export type ProposalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
  }


  /**
   * Model University
   */

  export type AggregateUniversity = {
    _count: UniversityCountAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  export type UniversityMinAggregateOutputType = {
    id: string | null
    name: string | null
    country: string | null
  }

  export type UniversityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    country: string | null
  }

  export type UniversityCountAggregateOutputType = {
    id: number
    name: number
    country: number
    _all: number
  }


  export type UniversityMinAggregateInputType = {
    id?: true
    name?: true
    country?: true
  }

  export type UniversityMaxAggregateInputType = {
    id?: true
    name?: true
    country?: true
  }

  export type UniversityCountAggregateInputType = {
    id?: true
    name?: true
    country?: true
    _all?: true
  }

  export type UniversityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which University to aggregate.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Universities
    **/
    _count?: true | UniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UniversityMaxAggregateInputType
  }

  export type GetUniversityAggregateType<T extends UniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUniversity[P]>
      : GetScalarType<T[P], AggregateUniversity[P]>
  }




  export type UniversityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityWhereInput
    orderBy?: UniversityOrderByWithAggregationInput | UniversityOrderByWithAggregationInput[]
    by: UniversityScalarFieldEnum[] | UniversityScalarFieldEnum
    having?: UniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UniversityCountAggregateInputType | true
    _min?: UniversityMinAggregateInputType
    _max?: UniversityMaxAggregateInputType
  }

  export type UniversityGroupByOutputType = {
    id: string
    name: string
    country: string
    _count: UniversityCountAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  type GetUniversityGroupByPayload<T extends UniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UniversityGroupByOutputType[P]>
            : GetScalarType<T[P], UniversityGroupByOutputType[P]>
        }
      >
    >


  export type UniversitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
    profiles?: boolean | University$profilesArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectScalar = {
    id?: boolean
    name?: boolean
    country?: boolean
  }

  export type UniversityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | University$profilesArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UniversityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UniversityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "University"
    objects: {
      profiles: Prisma.$UniversityProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      country: string
    }, ExtArgs["result"]["university"]>
    composites: {}
  }

  type UniversityGetPayload<S extends boolean | null | undefined | UniversityDefaultArgs> = $Result.GetResult<Prisma.$UniversityPayload, S>

  type UniversityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UniversityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UniversityCountAggregateInputType | true
    }

  export interface UniversityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['University'], meta: { name: 'University' } }
    /**
     * Find zero or one University that matches the filter.
     * @param {UniversityFindUniqueArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UniversityFindUniqueArgs>(args: SelectSubset<T, UniversityFindUniqueArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one University that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UniversityFindUniqueOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UniversityFindUniqueOrThrowArgs>(args: SelectSubset<T, UniversityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first University that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UniversityFindFirstArgs>(args?: SelectSubset<T, UniversityFindFirstArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first University that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UniversityFindFirstOrThrowArgs>(args?: SelectSubset<T, UniversityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Universities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Universities
     * const universities = await prisma.university.findMany()
     * 
     * // Get first 10 Universities
     * const universities = await prisma.university.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const universityWithIdOnly = await prisma.university.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UniversityFindManyArgs>(args?: SelectSubset<T, UniversityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a University.
     * @param {UniversityCreateArgs} args - Arguments to create a University.
     * @example
     * // Create one University
     * const University = await prisma.university.create({
     *   data: {
     *     // ... data to create a University
     *   }
     * })
     * 
     */
    create<T extends UniversityCreateArgs>(args: SelectSubset<T, UniversityCreateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Universities.
     * @param {UniversityCreateManyArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UniversityCreateManyArgs>(args?: SelectSubset<T, UniversityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Universities and returns the data saved in the database.
     * @param {UniversityCreateManyAndReturnArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Universities and only return the `id`
     * const universityWithIdOnly = await prisma.university.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UniversityCreateManyAndReturnArgs>(args?: SelectSubset<T, UniversityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a University.
     * @param {UniversityDeleteArgs} args - Arguments to delete one University.
     * @example
     * // Delete one University
     * const University = await prisma.university.delete({
     *   where: {
     *     // ... filter to delete one University
     *   }
     * })
     * 
     */
    delete<T extends UniversityDeleteArgs>(args: SelectSubset<T, UniversityDeleteArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one University.
     * @param {UniversityUpdateArgs} args - Arguments to update one University.
     * @example
     * // Update one University
     * const university = await prisma.university.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UniversityUpdateArgs>(args: SelectSubset<T, UniversityUpdateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Universities.
     * @param {UniversityDeleteManyArgs} args - Arguments to filter Universities to delete.
     * @example
     * // Delete a few Universities
     * const { count } = await prisma.university.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UniversityDeleteManyArgs>(args?: SelectSubset<T, UniversityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Universities
     * const university = await prisma.university.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UniversityUpdateManyArgs>(args: SelectSubset<T, UniversityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one University.
     * @param {UniversityUpsertArgs} args - Arguments to update or create a University.
     * @example
     * // Update or create a University
     * const university = await prisma.university.upsert({
     *   create: {
     *     // ... data to create a University
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the University we want to update
     *   }
     * })
     */
    upsert<T extends UniversityUpsertArgs>(args: SelectSubset<T, UniversityUpsertArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityCountArgs} args - Arguments to filter Universities to count.
     * @example
     * // Count the number of Universities
     * const count = await prisma.university.count({
     *   where: {
     *     // ... the filter for the Universities we want to count
     *   }
     * })
    **/
    count<T extends UniversityCountArgs>(
      args?: Subset<T, UniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UniversityAggregateArgs>(args: Subset<T, UniversityAggregateArgs>): Prisma.PrismaPromise<GetUniversityAggregateType<T>>

    /**
     * Group by University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UniversityGroupByArgs['orderBy'] }
        : { orderBy?: UniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the University model
   */
  readonly fields: UniversityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for University.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UniversityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends University$profilesArgs<ExtArgs> = {}>(args?: Subset<T, University$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the University model
   */ 
  interface UniversityFieldRefs {
    readonly id: FieldRef<"University", 'String'>
    readonly name: FieldRef<"University", 'String'>
    readonly country: FieldRef<"University", 'String'>
  }
    

  // Custom InputTypes
  /**
   * University findUnique
   */
  export type UniversityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findUniqueOrThrow
   */
  export type UniversityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findFirst
   */
  export type UniversityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findFirstOrThrow
   */
  export type UniversityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findMany
   */
  export type UniversityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which Universities to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University create
   */
  export type UniversityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to create a University.
     */
    data: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
  }

  /**
   * University createMany
   */
  export type UniversityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University createManyAndReturn
   */
  export type UniversityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University update
   */
  export type UniversityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to update a University.
     */
    data: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
    /**
     * Choose, which University to update.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University updateMany
   */
  export type UniversityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Universities.
     */
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyInput>
    /**
     * Filter which Universities to update
     */
    where?: UniversityWhereInput
  }

  /**
   * University upsert
   */
  export type UniversityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The filter to search for the University to update in case it exists.
     */
    where: UniversityWhereUniqueInput
    /**
     * In case the University found by the `where` argument doesn't exist, create a new University with this data.
     */
    create: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
    /**
     * In case the University was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
  }

  /**
   * University delete
   */
  export type UniversityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter which University to delete.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University deleteMany
   */
  export type UniversityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Universities to delete
     */
    where?: UniversityWhereInput
  }

  /**
   * University.profiles
   */
  export type University$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    where?: UniversityProfileWhereInput
    orderBy?: UniversityProfileOrderByWithRelationInput | UniversityProfileOrderByWithRelationInput[]
    cursor?: UniversityProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UniversityProfileScalarFieldEnum | UniversityProfileScalarFieldEnum[]
  }

  /**
   * University without action
   */
  export type UniversityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityInclude<ExtArgs> | null
  }


  /**
   * Model UniversityProfile
   */

  export type AggregateUniversityProfile = {
    _count: UniversityProfileCountAggregateOutputType | null
    _min: UniversityProfileMinAggregateOutputType | null
    _max: UniversityProfileMaxAggregateOutputType | null
  }

  export type UniversityProfileMinAggregateOutputType = {
    id: string | null
    departmentName: string | null
    faculty: string | null
    logoUrl: string | null
    bannerImageUrl: string | null
    address: string | null
    websiteUrl: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    universityId: string | null
  }

  export type UniversityProfileMaxAggregateOutputType = {
    id: string | null
    departmentName: string | null
    faculty: string | null
    logoUrl: string | null
    bannerImageUrl: string | null
    address: string | null
    websiteUrl: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    universityId: string | null
  }

  export type UniversityProfileCountAggregateOutputType = {
    id: number
    departmentName: number
    faculty: number
    logoUrl: number
    bannerImageUrl: number
    address: number
    websiteUrl: number
    description: number
    createdAt: number
    updatedAt: number
    userId: number
    universityId: number
    _all: number
  }


  export type UniversityProfileMinAggregateInputType = {
    id?: true
    departmentName?: true
    faculty?: true
    logoUrl?: true
    bannerImageUrl?: true
    address?: true
    websiteUrl?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    universityId?: true
  }

  export type UniversityProfileMaxAggregateInputType = {
    id?: true
    departmentName?: true
    faculty?: true
    logoUrl?: true
    bannerImageUrl?: true
    address?: true
    websiteUrl?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    universityId?: true
  }

  export type UniversityProfileCountAggregateInputType = {
    id?: true
    departmentName?: true
    faculty?: true
    logoUrl?: true
    bannerImageUrl?: true
    address?: true
    websiteUrl?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    universityId?: true
    _all?: true
  }

  export type UniversityProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UniversityProfile to aggregate.
     */
    where?: UniversityProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UniversityProfiles to fetch.
     */
    orderBy?: UniversityProfileOrderByWithRelationInput | UniversityProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UniversityProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UniversityProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UniversityProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UniversityProfiles
    **/
    _count?: true | UniversityProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UniversityProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UniversityProfileMaxAggregateInputType
  }

  export type GetUniversityProfileAggregateType<T extends UniversityProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUniversityProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUniversityProfile[P]>
      : GetScalarType<T[P], AggregateUniversityProfile[P]>
  }




  export type UniversityProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityProfileWhereInput
    orderBy?: UniversityProfileOrderByWithAggregationInput | UniversityProfileOrderByWithAggregationInput[]
    by: UniversityProfileScalarFieldEnum[] | UniversityProfileScalarFieldEnum
    having?: UniversityProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UniversityProfileCountAggregateInputType | true
    _min?: UniversityProfileMinAggregateInputType
    _max?: UniversityProfileMaxAggregateInputType
  }

  export type UniversityProfileGroupByOutputType = {
    id: string
    departmentName: string
    faculty: string | null
    logoUrl: string | null
    bannerImageUrl: string | null
    address: string | null
    websiteUrl: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    universityId: string
    _count: UniversityProfileCountAggregateOutputType | null
    _min: UniversityProfileMinAggregateOutputType | null
    _max: UniversityProfileMaxAggregateOutputType | null
  }

  type GetUniversityProfileGroupByPayload<T extends UniversityProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UniversityProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UniversityProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UniversityProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UniversityProfileGroupByOutputType[P]>
        }
      >
    >


  export type UniversityProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentName?: boolean
    faculty?: boolean
    logoUrl?: boolean
    bannerImageUrl?: boolean
    address?: boolean
    websiteUrl?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    universityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    openCalls?: boolean | UniversityProfile$openCallsArgs<ExtArgs>
    _count?: boolean | UniversityProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["universityProfile"]>

  export type UniversityProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentName?: boolean
    faculty?: boolean
    logoUrl?: boolean
    bannerImageUrl?: boolean
    address?: boolean
    websiteUrl?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    universityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["universityProfile"]>

  export type UniversityProfileSelectScalar = {
    id?: boolean
    departmentName?: boolean
    faculty?: boolean
    logoUrl?: boolean
    bannerImageUrl?: boolean
    address?: boolean
    websiteUrl?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    universityId?: boolean
  }

  export type UniversityProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
    openCalls?: boolean | UniversityProfile$openCallsArgs<ExtArgs>
    _count?: boolean | UniversityProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UniversityProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    university?: boolean | UniversityDefaultArgs<ExtArgs>
  }

  export type $UniversityProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UniversityProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      university: Prisma.$UniversityPayload<ExtArgs>
      openCalls: Prisma.$OpenCallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      departmentName: string
      faculty: string | null
      logoUrl: string | null
      bannerImageUrl: string | null
      address: string | null
      websiteUrl: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      universityId: string
    }, ExtArgs["result"]["universityProfile"]>
    composites: {}
  }

  type UniversityProfileGetPayload<S extends boolean | null | undefined | UniversityProfileDefaultArgs> = $Result.GetResult<Prisma.$UniversityProfilePayload, S>

  type UniversityProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UniversityProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UniversityProfileCountAggregateInputType | true
    }

  export interface UniversityProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UniversityProfile'], meta: { name: 'UniversityProfile' } }
    /**
     * Find zero or one UniversityProfile that matches the filter.
     * @param {UniversityProfileFindUniqueArgs} args - Arguments to find a UniversityProfile
     * @example
     * // Get one UniversityProfile
     * const universityProfile = await prisma.universityProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UniversityProfileFindUniqueArgs>(args: SelectSubset<T, UniversityProfileFindUniqueArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UniversityProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UniversityProfileFindUniqueOrThrowArgs} args - Arguments to find a UniversityProfile
     * @example
     * // Get one UniversityProfile
     * const universityProfile = await prisma.universityProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UniversityProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UniversityProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UniversityProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileFindFirstArgs} args - Arguments to find a UniversityProfile
     * @example
     * // Get one UniversityProfile
     * const universityProfile = await prisma.universityProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UniversityProfileFindFirstArgs>(args?: SelectSubset<T, UniversityProfileFindFirstArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UniversityProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileFindFirstOrThrowArgs} args - Arguments to find a UniversityProfile
     * @example
     * // Get one UniversityProfile
     * const universityProfile = await prisma.universityProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UniversityProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UniversityProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UniversityProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UniversityProfiles
     * const universityProfiles = await prisma.universityProfile.findMany()
     * 
     * // Get first 10 UniversityProfiles
     * const universityProfiles = await prisma.universityProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const universityProfileWithIdOnly = await prisma.universityProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UniversityProfileFindManyArgs>(args?: SelectSubset<T, UniversityProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UniversityProfile.
     * @param {UniversityProfileCreateArgs} args - Arguments to create a UniversityProfile.
     * @example
     * // Create one UniversityProfile
     * const UniversityProfile = await prisma.universityProfile.create({
     *   data: {
     *     // ... data to create a UniversityProfile
     *   }
     * })
     * 
     */
    create<T extends UniversityProfileCreateArgs>(args: SelectSubset<T, UniversityProfileCreateArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UniversityProfiles.
     * @param {UniversityProfileCreateManyArgs} args - Arguments to create many UniversityProfiles.
     * @example
     * // Create many UniversityProfiles
     * const universityProfile = await prisma.universityProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UniversityProfileCreateManyArgs>(args?: SelectSubset<T, UniversityProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UniversityProfiles and returns the data saved in the database.
     * @param {UniversityProfileCreateManyAndReturnArgs} args - Arguments to create many UniversityProfiles.
     * @example
     * // Create many UniversityProfiles
     * const universityProfile = await prisma.universityProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UniversityProfiles and only return the `id`
     * const universityProfileWithIdOnly = await prisma.universityProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UniversityProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UniversityProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UniversityProfile.
     * @param {UniversityProfileDeleteArgs} args - Arguments to delete one UniversityProfile.
     * @example
     * // Delete one UniversityProfile
     * const UniversityProfile = await prisma.universityProfile.delete({
     *   where: {
     *     // ... filter to delete one UniversityProfile
     *   }
     * })
     * 
     */
    delete<T extends UniversityProfileDeleteArgs>(args: SelectSubset<T, UniversityProfileDeleteArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UniversityProfile.
     * @param {UniversityProfileUpdateArgs} args - Arguments to update one UniversityProfile.
     * @example
     * // Update one UniversityProfile
     * const universityProfile = await prisma.universityProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UniversityProfileUpdateArgs>(args: SelectSubset<T, UniversityProfileUpdateArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UniversityProfiles.
     * @param {UniversityProfileDeleteManyArgs} args - Arguments to filter UniversityProfiles to delete.
     * @example
     * // Delete a few UniversityProfiles
     * const { count } = await prisma.universityProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UniversityProfileDeleteManyArgs>(args?: SelectSubset<T, UniversityProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UniversityProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UniversityProfiles
     * const universityProfile = await prisma.universityProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UniversityProfileUpdateManyArgs>(args: SelectSubset<T, UniversityProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UniversityProfile.
     * @param {UniversityProfileUpsertArgs} args - Arguments to update or create a UniversityProfile.
     * @example
     * // Update or create a UniversityProfile
     * const universityProfile = await prisma.universityProfile.upsert({
     *   create: {
     *     // ... data to create a UniversityProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UniversityProfile we want to update
     *   }
     * })
     */
    upsert<T extends UniversityProfileUpsertArgs>(args: SelectSubset<T, UniversityProfileUpsertArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UniversityProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileCountArgs} args - Arguments to filter UniversityProfiles to count.
     * @example
     * // Count the number of UniversityProfiles
     * const count = await prisma.universityProfile.count({
     *   where: {
     *     // ... the filter for the UniversityProfiles we want to count
     *   }
     * })
    **/
    count<T extends UniversityProfileCountArgs>(
      args?: Subset<T, UniversityProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UniversityProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UniversityProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UniversityProfileAggregateArgs>(args: Subset<T, UniversityProfileAggregateArgs>): Prisma.PrismaPromise<GetUniversityProfileAggregateType<T>>

    /**
     * Group by UniversityProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UniversityProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UniversityProfileGroupByArgs['orderBy'] }
        : { orderBy?: UniversityProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UniversityProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UniversityProfile model
   */
  readonly fields: UniversityProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UniversityProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UniversityProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    university<T extends UniversityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UniversityDefaultArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    openCalls<T extends UniversityProfile$openCallsArgs<ExtArgs> = {}>(args?: Subset<T, UniversityProfile$openCallsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UniversityProfile model
   */ 
  interface UniversityProfileFieldRefs {
    readonly id: FieldRef<"UniversityProfile", 'String'>
    readonly departmentName: FieldRef<"UniversityProfile", 'String'>
    readonly faculty: FieldRef<"UniversityProfile", 'String'>
    readonly logoUrl: FieldRef<"UniversityProfile", 'String'>
    readonly bannerImageUrl: FieldRef<"UniversityProfile", 'String'>
    readonly address: FieldRef<"UniversityProfile", 'String'>
    readonly websiteUrl: FieldRef<"UniversityProfile", 'String'>
    readonly description: FieldRef<"UniversityProfile", 'String'>
    readonly createdAt: FieldRef<"UniversityProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UniversityProfile", 'DateTime'>
    readonly userId: FieldRef<"UniversityProfile", 'String'>
    readonly universityId: FieldRef<"UniversityProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UniversityProfile findUnique
   */
  export type UniversityProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter, which UniversityProfile to fetch.
     */
    where: UniversityProfileWhereUniqueInput
  }

  /**
   * UniversityProfile findUniqueOrThrow
   */
  export type UniversityProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter, which UniversityProfile to fetch.
     */
    where: UniversityProfileWhereUniqueInput
  }

  /**
   * UniversityProfile findFirst
   */
  export type UniversityProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter, which UniversityProfile to fetch.
     */
    where?: UniversityProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UniversityProfiles to fetch.
     */
    orderBy?: UniversityProfileOrderByWithRelationInput | UniversityProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UniversityProfiles.
     */
    cursor?: UniversityProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UniversityProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UniversityProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UniversityProfiles.
     */
    distinct?: UniversityProfileScalarFieldEnum | UniversityProfileScalarFieldEnum[]
  }

  /**
   * UniversityProfile findFirstOrThrow
   */
  export type UniversityProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter, which UniversityProfile to fetch.
     */
    where?: UniversityProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UniversityProfiles to fetch.
     */
    orderBy?: UniversityProfileOrderByWithRelationInput | UniversityProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UniversityProfiles.
     */
    cursor?: UniversityProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UniversityProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UniversityProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UniversityProfiles.
     */
    distinct?: UniversityProfileScalarFieldEnum | UniversityProfileScalarFieldEnum[]
  }

  /**
   * UniversityProfile findMany
   */
  export type UniversityProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter, which UniversityProfiles to fetch.
     */
    where?: UniversityProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UniversityProfiles to fetch.
     */
    orderBy?: UniversityProfileOrderByWithRelationInput | UniversityProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UniversityProfiles.
     */
    cursor?: UniversityProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UniversityProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UniversityProfiles.
     */
    skip?: number
    distinct?: UniversityProfileScalarFieldEnum | UniversityProfileScalarFieldEnum[]
  }

  /**
   * UniversityProfile create
   */
  export type UniversityProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UniversityProfile.
     */
    data: XOR<UniversityProfileCreateInput, UniversityProfileUncheckedCreateInput>
  }

  /**
   * UniversityProfile createMany
   */
  export type UniversityProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UniversityProfiles.
     */
    data: UniversityProfileCreateManyInput | UniversityProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UniversityProfile createManyAndReturn
   */
  export type UniversityProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UniversityProfiles.
     */
    data: UniversityProfileCreateManyInput | UniversityProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UniversityProfile update
   */
  export type UniversityProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UniversityProfile.
     */
    data: XOR<UniversityProfileUpdateInput, UniversityProfileUncheckedUpdateInput>
    /**
     * Choose, which UniversityProfile to update.
     */
    where: UniversityProfileWhereUniqueInput
  }

  /**
   * UniversityProfile updateMany
   */
  export type UniversityProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UniversityProfiles.
     */
    data: XOR<UniversityProfileUpdateManyMutationInput, UniversityProfileUncheckedUpdateManyInput>
    /**
     * Filter which UniversityProfiles to update
     */
    where?: UniversityProfileWhereInput
  }

  /**
   * UniversityProfile upsert
   */
  export type UniversityProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UniversityProfile to update in case it exists.
     */
    where: UniversityProfileWhereUniqueInput
    /**
     * In case the UniversityProfile found by the `where` argument doesn't exist, create a new UniversityProfile with this data.
     */
    create: XOR<UniversityProfileCreateInput, UniversityProfileUncheckedCreateInput>
    /**
     * In case the UniversityProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UniversityProfileUpdateInput, UniversityProfileUncheckedUpdateInput>
  }

  /**
   * UniversityProfile delete
   */
  export type UniversityProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
    /**
     * Filter which UniversityProfile to delete.
     */
    where: UniversityProfileWhereUniqueInput
  }

  /**
   * UniversityProfile deleteMany
   */
  export type UniversityProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UniversityProfiles to delete
     */
    where?: UniversityProfileWhereInput
  }

  /**
   * UniversityProfile.openCalls
   */
  export type UniversityProfile$openCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    where?: OpenCallWhereInput
    orderBy?: OpenCallOrderByWithRelationInput | OpenCallOrderByWithRelationInput[]
    cursor?: OpenCallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenCallScalarFieldEnum | OpenCallScalarFieldEnum[]
  }

  /**
   * UniversityProfile without action
   */
  export type UniversityProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityProfile
     */
    select?: UniversityProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UniversityProfileInclude<ExtArgs> | null
  }


  /**
   * Model OpenCall
   */

  export type AggregateOpenCall = {
    _count: OpenCallCountAggregateOutputType | null
    _avg: OpenCallAvgAggregateOutputType | null
    _sum: OpenCallSumAggregateOutputType | null
    _min: OpenCallMinAggregateOutputType | null
    _max: OpenCallMaxAggregateOutputType | null
  }

  export type OpenCallAvgAggregateOutputType = {
    targetNumberOfAwards: number | null
  }

  export type OpenCallSumAggregateOutputType = {
    targetNumberOfAwards: number | null
  }

  export type OpenCallMinAggregateOutputType = {
    id: string | null
    title: string | null
    summary: string | null
    researchArea: string | null
    targetNumberOfAwards: number | null
    assistanceOffered: string | null
    requiresProposal: boolean | null
    proposalTemplateUrl: string | null
    fundingType: string | null
    fundingAmount: string | null
    submissionOpenDate: Date | null
    submissionDeadline: Date | null
    reviewPeriodStartDate: Date | null
    notificationDate: Date | null
    status: $Enums.OpenCallStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type OpenCallMaxAggregateOutputType = {
    id: string | null
    title: string | null
    summary: string | null
    researchArea: string | null
    targetNumberOfAwards: number | null
    assistanceOffered: string | null
    requiresProposal: boolean | null
    proposalTemplateUrl: string | null
    fundingType: string | null
    fundingAmount: string | null
    submissionOpenDate: Date | null
    submissionDeadline: Date | null
    reviewPeriodStartDate: Date | null
    notificationDate: Date | null
    status: $Enums.OpenCallStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type OpenCallCountAggregateOutputType = {
    id: number
    title: number
    summary: number
    researchArea: number
    keywords: number
    projectTypes: number
    targetNumberOfAwards: number
    assistanceOffered: number
    eligibleInstitutionTypes: number
    eligibleCountries: number
    eligibleCareerStages: number
    requiresProposal: number
    proposalTemplateUrl: number
    customApplicationQuestions: number
    evaluationCriteria: number
    fundingType: number
    fundingAmount: number
    submissionOpenDate: number
    submissionDeadline: number
    reviewPeriodStartDate: number
    notificationDate: number
    status: number
    createdAt: number
    updatedAt: number
    authorId: number
    _all: number
  }


  export type OpenCallAvgAggregateInputType = {
    targetNumberOfAwards?: true
  }

  export type OpenCallSumAggregateInputType = {
    targetNumberOfAwards?: true
  }

  export type OpenCallMinAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    researchArea?: true
    targetNumberOfAwards?: true
    assistanceOffered?: true
    requiresProposal?: true
    proposalTemplateUrl?: true
    fundingType?: true
    fundingAmount?: true
    submissionOpenDate?: true
    submissionDeadline?: true
    reviewPeriodStartDate?: true
    notificationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type OpenCallMaxAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    researchArea?: true
    targetNumberOfAwards?: true
    assistanceOffered?: true
    requiresProposal?: true
    proposalTemplateUrl?: true
    fundingType?: true
    fundingAmount?: true
    submissionOpenDate?: true
    submissionDeadline?: true
    reviewPeriodStartDate?: true
    notificationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type OpenCallCountAggregateInputType = {
    id?: true
    title?: true
    summary?: true
    researchArea?: true
    keywords?: true
    projectTypes?: true
    targetNumberOfAwards?: true
    assistanceOffered?: true
    eligibleInstitutionTypes?: true
    eligibleCountries?: true
    eligibleCareerStages?: true
    requiresProposal?: true
    proposalTemplateUrl?: true
    customApplicationQuestions?: true
    evaluationCriteria?: true
    fundingType?: true
    fundingAmount?: true
    submissionOpenDate?: true
    submissionDeadline?: true
    reviewPeriodStartDate?: true
    notificationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    _all?: true
  }

  export type OpenCallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenCall to aggregate.
     */
    where?: OpenCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenCalls to fetch.
     */
    orderBy?: OpenCallOrderByWithRelationInput | OpenCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenCalls
    **/
    _count?: true | OpenCallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpenCallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpenCallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenCallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenCallMaxAggregateInputType
  }

  export type GetOpenCallAggregateType<T extends OpenCallAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenCall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenCall[P]>
      : GetScalarType<T[P], AggregateOpenCall[P]>
  }




  export type OpenCallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenCallWhereInput
    orderBy?: OpenCallOrderByWithAggregationInput | OpenCallOrderByWithAggregationInput[]
    by: OpenCallScalarFieldEnum[] | OpenCallScalarFieldEnum
    having?: OpenCallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenCallCountAggregateInputType | true
    _avg?: OpenCallAvgAggregateInputType
    _sum?: OpenCallSumAggregateInputType
    _min?: OpenCallMinAggregateInputType
    _max?: OpenCallMaxAggregateInputType
  }

  export type OpenCallGroupByOutputType = {
    id: string
    title: string
    summary: string
    researchArea: string
    keywords: string[]
    projectTypes: $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered: string | null
    eligibleInstitutionTypes: string[]
    eligibleCountries: string[]
    eligibleCareerStages: $Enums.JobType[]
    requiresProposal: boolean
    proposalTemplateUrl: string | null
    customApplicationQuestions: JsonValue | null
    evaluationCriteria: JsonValue | null
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date
    submissionDeadline: Date
    reviewPeriodStartDate: Date
    notificationDate: Date
    status: $Enums.OpenCallStatus
    createdAt: Date
    updatedAt: Date
    authorId: string
    _count: OpenCallCountAggregateOutputType | null
    _avg: OpenCallAvgAggregateOutputType | null
    _sum: OpenCallSumAggregateOutputType | null
    _min: OpenCallMinAggregateOutputType | null
    _max: OpenCallMaxAggregateOutputType | null
  }

  type GetOpenCallGroupByPayload<T extends OpenCallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenCallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenCallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenCallGroupByOutputType[P]>
            : GetScalarType<T[P], OpenCallGroupByOutputType[P]>
        }
      >
    >


  export type OpenCallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    summary?: boolean
    researchArea?: boolean
    keywords?: boolean
    projectTypes?: boolean
    targetNumberOfAwards?: boolean
    assistanceOffered?: boolean
    eligibleInstitutionTypes?: boolean
    eligibleCountries?: boolean
    eligibleCareerStages?: boolean
    requiresProposal?: boolean
    proposalTemplateUrl?: boolean
    customApplicationQuestions?: boolean
    evaluationCriteria?: boolean
    fundingType?: boolean
    fundingAmount?: boolean
    submissionOpenDate?: boolean
    submissionDeadline?: boolean
    reviewPeriodStartDate?: boolean
    notificationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UniversityProfileDefaultArgs<ExtArgs>
    applications?: boolean | OpenCall$applicationsArgs<ExtArgs>
    _count?: boolean | OpenCallCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openCall"]>

  export type OpenCallSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    summary?: boolean
    researchArea?: boolean
    keywords?: boolean
    projectTypes?: boolean
    targetNumberOfAwards?: boolean
    assistanceOffered?: boolean
    eligibleInstitutionTypes?: boolean
    eligibleCountries?: boolean
    eligibleCareerStages?: boolean
    requiresProposal?: boolean
    proposalTemplateUrl?: boolean
    customApplicationQuestions?: boolean
    evaluationCriteria?: boolean
    fundingType?: boolean
    fundingAmount?: boolean
    submissionOpenDate?: boolean
    submissionDeadline?: boolean
    reviewPeriodStartDate?: boolean
    notificationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UniversityProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openCall"]>

  export type OpenCallSelectScalar = {
    id?: boolean
    title?: boolean
    summary?: boolean
    researchArea?: boolean
    keywords?: boolean
    projectTypes?: boolean
    targetNumberOfAwards?: boolean
    assistanceOffered?: boolean
    eligibleInstitutionTypes?: boolean
    eligibleCountries?: boolean
    eligibleCareerStages?: boolean
    requiresProposal?: boolean
    proposalTemplateUrl?: boolean
    customApplicationQuestions?: boolean
    evaluationCriteria?: boolean
    fundingType?: boolean
    fundingAmount?: boolean
    submissionOpenDate?: boolean
    submissionDeadline?: boolean
    reviewPeriodStartDate?: boolean
    notificationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
  }

  export type OpenCallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UniversityProfileDefaultArgs<ExtArgs>
    applications?: boolean | OpenCall$applicationsArgs<ExtArgs>
    _count?: boolean | OpenCallCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OpenCallIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UniversityProfileDefaultArgs<ExtArgs>
  }

  export type $OpenCallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenCall"
    objects: {
      author: Prisma.$UniversityProfilePayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      summary: string
      researchArea: string
      keywords: string[]
      projectTypes: $Enums.ProjectType[]
      targetNumberOfAwards: number
      assistanceOffered: string | null
      eligibleInstitutionTypes: string[]
      eligibleCountries: string[]
      eligibleCareerStages: $Enums.JobType[]
      requiresProposal: boolean
      proposalTemplateUrl: string | null
      customApplicationQuestions: Prisma.JsonValue | null
      evaluationCriteria: Prisma.JsonValue | null
      fundingType: string
      fundingAmount: string
      submissionOpenDate: Date
      submissionDeadline: Date
      reviewPeriodStartDate: Date
      notificationDate: Date
      status: $Enums.OpenCallStatus
      createdAt: Date
      updatedAt: Date
      authorId: string
    }, ExtArgs["result"]["openCall"]>
    composites: {}
  }

  type OpenCallGetPayload<S extends boolean | null | undefined | OpenCallDefaultArgs> = $Result.GetResult<Prisma.$OpenCallPayload, S>

  type OpenCallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenCallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenCallCountAggregateInputType | true
    }

  export interface OpenCallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenCall'], meta: { name: 'OpenCall' } }
    /**
     * Find zero or one OpenCall that matches the filter.
     * @param {OpenCallFindUniqueArgs} args - Arguments to find a OpenCall
     * @example
     * // Get one OpenCall
     * const openCall = await prisma.openCall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenCallFindUniqueArgs>(args: SelectSubset<T, OpenCallFindUniqueArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenCall that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenCallFindUniqueOrThrowArgs} args - Arguments to find a OpenCall
     * @example
     * // Get one OpenCall
     * const openCall = await prisma.openCall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenCallFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenCallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenCall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallFindFirstArgs} args - Arguments to find a OpenCall
     * @example
     * // Get one OpenCall
     * const openCall = await prisma.openCall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenCallFindFirstArgs>(args?: SelectSubset<T, OpenCallFindFirstArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenCall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallFindFirstOrThrowArgs} args - Arguments to find a OpenCall
     * @example
     * // Get one OpenCall
     * const openCall = await prisma.openCall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenCallFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenCallFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenCalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenCalls
     * const openCalls = await prisma.openCall.findMany()
     * 
     * // Get first 10 OpenCalls
     * const openCalls = await prisma.openCall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const openCallWithIdOnly = await prisma.openCall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpenCallFindManyArgs>(args?: SelectSubset<T, OpenCallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenCall.
     * @param {OpenCallCreateArgs} args - Arguments to create a OpenCall.
     * @example
     * // Create one OpenCall
     * const OpenCall = await prisma.openCall.create({
     *   data: {
     *     // ... data to create a OpenCall
     *   }
     * })
     * 
     */
    create<T extends OpenCallCreateArgs>(args: SelectSubset<T, OpenCallCreateArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenCalls.
     * @param {OpenCallCreateManyArgs} args - Arguments to create many OpenCalls.
     * @example
     * // Create many OpenCalls
     * const openCall = await prisma.openCall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenCallCreateManyArgs>(args?: SelectSubset<T, OpenCallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenCalls and returns the data saved in the database.
     * @param {OpenCallCreateManyAndReturnArgs} args - Arguments to create many OpenCalls.
     * @example
     * // Create many OpenCalls
     * const openCall = await prisma.openCall.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenCalls and only return the `id`
     * const openCallWithIdOnly = await prisma.openCall.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenCallCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenCallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenCall.
     * @param {OpenCallDeleteArgs} args - Arguments to delete one OpenCall.
     * @example
     * // Delete one OpenCall
     * const OpenCall = await prisma.openCall.delete({
     *   where: {
     *     // ... filter to delete one OpenCall
     *   }
     * })
     * 
     */
    delete<T extends OpenCallDeleteArgs>(args: SelectSubset<T, OpenCallDeleteArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenCall.
     * @param {OpenCallUpdateArgs} args - Arguments to update one OpenCall.
     * @example
     * // Update one OpenCall
     * const openCall = await prisma.openCall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenCallUpdateArgs>(args: SelectSubset<T, OpenCallUpdateArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenCalls.
     * @param {OpenCallDeleteManyArgs} args - Arguments to filter OpenCalls to delete.
     * @example
     * // Delete a few OpenCalls
     * const { count } = await prisma.openCall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenCallDeleteManyArgs>(args?: SelectSubset<T, OpenCallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenCalls
     * const openCall = await prisma.openCall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenCallUpdateManyArgs>(args: SelectSubset<T, OpenCallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenCall.
     * @param {OpenCallUpsertArgs} args - Arguments to update or create a OpenCall.
     * @example
     * // Update or create a OpenCall
     * const openCall = await prisma.openCall.upsert({
     *   create: {
     *     // ... data to create a OpenCall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenCall we want to update
     *   }
     * })
     */
    upsert<T extends OpenCallUpsertArgs>(args: SelectSubset<T, OpenCallUpsertArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallCountArgs} args - Arguments to filter OpenCalls to count.
     * @example
     * // Count the number of OpenCalls
     * const count = await prisma.openCall.count({
     *   where: {
     *     // ... the filter for the OpenCalls we want to count
     *   }
     * })
    **/
    count<T extends OpenCallCountArgs>(
      args?: Subset<T, OpenCallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenCallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenCallAggregateArgs>(args: Subset<T, OpenCallAggregateArgs>): Prisma.PrismaPromise<GetOpenCallAggregateType<T>>

    /**
     * Group by OpenCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenCallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenCallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenCallGroupByArgs['orderBy'] }
        : { orderBy?: OpenCallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenCallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenCall model
   */
  readonly fields: OpenCallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenCall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenCallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UniversityProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UniversityProfileDefaultArgs<ExtArgs>>): Prisma__UniversityProfileClient<$Result.GetResult<Prisma.$UniversityProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applications<T extends OpenCall$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, OpenCall$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenCall model
   */ 
  interface OpenCallFieldRefs {
    readonly id: FieldRef<"OpenCall", 'String'>
    readonly title: FieldRef<"OpenCall", 'String'>
    readonly summary: FieldRef<"OpenCall", 'String'>
    readonly researchArea: FieldRef<"OpenCall", 'String'>
    readonly keywords: FieldRef<"OpenCall", 'String[]'>
    readonly projectTypes: FieldRef<"OpenCall", 'ProjectType[]'>
    readonly targetNumberOfAwards: FieldRef<"OpenCall", 'Int'>
    readonly assistanceOffered: FieldRef<"OpenCall", 'String'>
    readonly eligibleInstitutionTypes: FieldRef<"OpenCall", 'String[]'>
    readonly eligibleCountries: FieldRef<"OpenCall", 'String[]'>
    readonly eligibleCareerStages: FieldRef<"OpenCall", 'JobType[]'>
    readonly requiresProposal: FieldRef<"OpenCall", 'Boolean'>
    readonly proposalTemplateUrl: FieldRef<"OpenCall", 'String'>
    readonly customApplicationQuestions: FieldRef<"OpenCall", 'Json'>
    readonly evaluationCriteria: FieldRef<"OpenCall", 'Json'>
    readonly fundingType: FieldRef<"OpenCall", 'String'>
    readonly fundingAmount: FieldRef<"OpenCall", 'String'>
    readonly submissionOpenDate: FieldRef<"OpenCall", 'DateTime'>
    readonly submissionDeadline: FieldRef<"OpenCall", 'DateTime'>
    readonly reviewPeriodStartDate: FieldRef<"OpenCall", 'DateTime'>
    readonly notificationDate: FieldRef<"OpenCall", 'DateTime'>
    readonly status: FieldRef<"OpenCall", 'OpenCallStatus'>
    readonly createdAt: FieldRef<"OpenCall", 'DateTime'>
    readonly updatedAt: FieldRef<"OpenCall", 'DateTime'>
    readonly authorId: FieldRef<"OpenCall", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OpenCall findUnique
   */
  export type OpenCallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter, which OpenCall to fetch.
     */
    where: OpenCallWhereUniqueInput
  }

  /**
   * OpenCall findUniqueOrThrow
   */
  export type OpenCallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter, which OpenCall to fetch.
     */
    where: OpenCallWhereUniqueInput
  }

  /**
   * OpenCall findFirst
   */
  export type OpenCallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter, which OpenCall to fetch.
     */
    where?: OpenCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenCalls to fetch.
     */
    orderBy?: OpenCallOrderByWithRelationInput | OpenCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenCalls.
     */
    cursor?: OpenCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenCalls.
     */
    distinct?: OpenCallScalarFieldEnum | OpenCallScalarFieldEnum[]
  }

  /**
   * OpenCall findFirstOrThrow
   */
  export type OpenCallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter, which OpenCall to fetch.
     */
    where?: OpenCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenCalls to fetch.
     */
    orderBy?: OpenCallOrderByWithRelationInput | OpenCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenCalls.
     */
    cursor?: OpenCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenCalls.
     */
    distinct?: OpenCallScalarFieldEnum | OpenCallScalarFieldEnum[]
  }

  /**
   * OpenCall findMany
   */
  export type OpenCallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter, which OpenCalls to fetch.
     */
    where?: OpenCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenCalls to fetch.
     */
    orderBy?: OpenCallOrderByWithRelationInput | OpenCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenCalls.
     */
    cursor?: OpenCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenCalls.
     */
    skip?: number
    distinct?: OpenCallScalarFieldEnum | OpenCallScalarFieldEnum[]
  }

  /**
   * OpenCall create
   */
  export type OpenCallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenCall.
     */
    data: XOR<OpenCallCreateInput, OpenCallUncheckedCreateInput>
  }

  /**
   * OpenCall createMany
   */
  export type OpenCallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenCalls.
     */
    data: OpenCallCreateManyInput | OpenCallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OpenCall createManyAndReturn
   */
  export type OpenCallCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenCalls.
     */
    data: OpenCallCreateManyInput | OpenCallCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenCall update
   */
  export type OpenCallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenCall.
     */
    data: XOR<OpenCallUpdateInput, OpenCallUncheckedUpdateInput>
    /**
     * Choose, which OpenCall to update.
     */
    where: OpenCallWhereUniqueInput
  }

  /**
   * OpenCall updateMany
   */
  export type OpenCallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenCalls.
     */
    data: XOR<OpenCallUpdateManyMutationInput, OpenCallUncheckedUpdateManyInput>
    /**
     * Filter which OpenCalls to update
     */
    where?: OpenCallWhereInput
  }

  /**
   * OpenCall upsert
   */
  export type OpenCallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenCall to update in case it exists.
     */
    where: OpenCallWhereUniqueInput
    /**
     * In case the OpenCall found by the `where` argument doesn't exist, create a new OpenCall with this data.
     */
    create: XOR<OpenCallCreateInput, OpenCallUncheckedCreateInput>
    /**
     * In case the OpenCall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenCallUpdateInput, OpenCallUncheckedUpdateInput>
  }

  /**
   * OpenCall delete
   */
  export type OpenCallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
    /**
     * Filter which OpenCall to delete.
     */
    where: OpenCallWhereUniqueInput
  }

  /**
   * OpenCall deleteMany
   */
  export type OpenCallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenCalls to delete
     */
    where?: OpenCallWhereInput
  }

  /**
   * OpenCall.applications
   */
  export type OpenCall$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * OpenCall without action
   */
  export type OpenCallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenCall
     */
    select?: OpenCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenCallInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: string | null
    status: $Enums.ApplicationStatus | null
    submittedAt: Date | null
    updatedAt: Date | null
    submittedCoverLetter: string | null
    offerType: $Enums.OfferType | null
    offerConditions: string | null
    offerRespondedAt: Date | null
    researcherResponse: $Enums.OfferResponse | null
    applicantId: string | null
    openCallId: string | null
    submittedProposalId: string | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: string | null
    status: $Enums.ApplicationStatus | null
    submittedAt: Date | null
    updatedAt: Date | null
    submittedCoverLetter: string | null
    offerType: $Enums.OfferType | null
    offerConditions: string | null
    offerRespondedAt: Date | null
    researcherResponse: $Enums.OfferResponse | null
    applicantId: string | null
    openCallId: string | null
    submittedProposalId: string | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    status: number
    submittedAt: number
    updatedAt: number
    submittedCoverLetter: number
    customApplicationAnswers: number
    offerType: number
    offerConditions: number
    offerRespondedAt: number
    researcherResponse: number
    applicantId: number
    openCallId: number
    submittedProposalId: number
    _all: number
  }


  export type ApplicationMinAggregateInputType = {
    id?: true
    status?: true
    submittedAt?: true
    updatedAt?: true
    submittedCoverLetter?: true
    offerType?: true
    offerConditions?: true
    offerRespondedAt?: true
    researcherResponse?: true
    applicantId?: true
    openCallId?: true
    submittedProposalId?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    status?: true
    submittedAt?: true
    updatedAt?: true
    submittedCoverLetter?: true
    offerType?: true
    offerConditions?: true
    offerRespondedAt?: true
    researcherResponse?: true
    applicantId?: true
    openCallId?: true
    submittedProposalId?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    status?: true
    submittedAt?: true
    updatedAt?: true
    submittedCoverLetter?: true
    customApplicationAnswers?: true
    offerType?: true
    offerConditions?: true
    offerRespondedAt?: true
    researcherResponse?: true
    applicantId?: true
    openCallId?: true
    submittedProposalId?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: string
    status: $Enums.ApplicationStatus
    submittedAt: Date
    updatedAt: Date
    submittedCoverLetter: string | null
    customApplicationAnswers: JsonValue | null
    offerType: $Enums.OfferType | null
    offerConditions: string | null
    offerRespondedAt: Date | null
    researcherResponse: $Enums.OfferResponse | null
    applicantId: string
    openCallId: string
    submittedProposalId: string | null
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    submittedCoverLetter?: boolean
    customApplicationAnswers?: boolean
    offerType?: boolean
    offerConditions?: boolean
    offerRespondedAt?: boolean
    researcherResponse?: boolean
    applicantId?: boolean
    openCallId?: boolean
    submittedProposalId?: boolean
    applicant?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    openCall?: boolean | OpenCallDefaultArgs<ExtArgs>
    submittedProposal?: boolean | Application$submittedProposalArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    submittedCoverLetter?: boolean
    customApplicationAnswers?: boolean
    offerType?: boolean
    offerConditions?: boolean
    offerRespondedAt?: boolean
    researcherResponse?: boolean
    applicantId?: boolean
    openCallId?: boolean
    submittedProposalId?: boolean
    applicant?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    openCall?: boolean | OpenCallDefaultArgs<ExtArgs>
    submittedProposal?: boolean | Application$submittedProposalArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    status?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    submittedCoverLetter?: boolean
    customApplicationAnswers?: boolean
    offerType?: boolean
    offerConditions?: boolean
    offerRespondedAt?: boolean
    researcherResponse?: boolean
    applicantId?: boolean
    openCallId?: boolean
    submittedProposalId?: boolean
  }

  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    openCall?: boolean | OpenCallDefaultArgs<ExtArgs>
    submittedProposal?: boolean | Application$submittedProposalArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ResearcherProfileDefaultArgs<ExtArgs>
    openCall?: boolean | OpenCallDefaultArgs<ExtArgs>
    submittedProposal?: boolean | Application$submittedProposalArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      applicant: Prisma.$ResearcherProfilePayload<ExtArgs>
      openCall: Prisma.$OpenCallPayload<ExtArgs>
      submittedProposal: Prisma.$ProposalPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.ApplicationStatus
      submittedAt: Date
      updatedAt: Date
      submittedCoverLetter: string | null
      customApplicationAnswers: Prisma.JsonValue | null
      offerType: $Enums.OfferType | null
      offerConditions: string | null
      offerRespondedAt: Date | null
      researcherResponse: $Enums.OfferResponse | null
      applicantId: string
      openCallId: string
      submittedProposalId: string | null
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ResearcherProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResearcherProfileDefaultArgs<ExtArgs>>): Prisma__ResearcherProfileClient<$Result.GetResult<Prisma.$ResearcherProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    openCall<T extends OpenCallDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OpenCallDefaultArgs<ExtArgs>>): Prisma__OpenCallClient<$Result.GetResult<Prisma.$OpenCallPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    submittedProposal<T extends Application$submittedProposalArgs<ExtArgs> = {}>(args?: Subset<T, Application$submittedProposalArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */ 
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'String'>
    readonly status: FieldRef<"Application", 'ApplicationStatus'>
    readonly submittedAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
    readonly submittedCoverLetter: FieldRef<"Application", 'String'>
    readonly customApplicationAnswers: FieldRef<"Application", 'Json'>
    readonly offerType: FieldRef<"Application", 'OfferType'>
    readonly offerConditions: FieldRef<"Application", 'String'>
    readonly offerRespondedAt: FieldRef<"Application", 'DateTime'>
    readonly researcherResponse: FieldRef<"Application", 'OfferResponse'>
    readonly applicantId: FieldRef<"Application", 'String'>
    readonly openCallId: FieldRef<"Application", 'String'>
    readonly submittedProposalId: FieldRef<"Application", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }

  /**
   * Application.submittedProposal
   */
  export type Application$submittedProposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    googleId: 'googleId',
    linkedInId: 'linkedInId',
    orcidId: 'orcidId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ResearcherProfileScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    professionalTitle: 'professionalTitle',
    currentInstitution: 'currentInstitution',
    currentLocation: 'currentLocation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type ResearcherProfileScalarFieldEnum = (typeof ResearcherProfileScalarFieldEnum)[keyof typeof ResearcherProfileScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    degree: 'degree',
    fieldOfStudy: 'fieldOfStudy',
    institution: 'institution',
    country: 'country',
    startDate: 'startDate',
    endDate: 'endDate',
    researcherProfileId: 'researcherProfileId'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const PublicationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    journal: 'journal',
    year: 'year',
    link: 'link',
    researcherProfileId: 'researcherProfileId'
  };

  export type PublicationScalarFieldEnum = (typeof PublicationScalarFieldEnum)[keyof typeof PublicationScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    type: 'type',
    researcherProfileId: 'researcherProfileId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const ProposalScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    isFinal: 'isFinal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    researcherProfileId: 'researcherProfileId'
  };

  export type ProposalScalarFieldEnum = (typeof ProposalScalarFieldEnum)[keyof typeof ProposalScalarFieldEnum]


  export const UniversityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    country: 'country'
  };

  export type UniversityScalarFieldEnum = (typeof UniversityScalarFieldEnum)[keyof typeof UniversityScalarFieldEnum]


  export const UniversityProfileScalarFieldEnum: {
    id: 'id',
    departmentName: 'departmentName',
    faculty: 'faculty',
    logoUrl: 'logoUrl',
    bannerImageUrl: 'bannerImageUrl',
    address: 'address',
    websiteUrl: 'websiteUrl',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    universityId: 'universityId'
  };

  export type UniversityProfileScalarFieldEnum = (typeof UniversityProfileScalarFieldEnum)[keyof typeof UniversityProfileScalarFieldEnum]


  export const OpenCallScalarFieldEnum: {
    id: 'id',
    title: 'title',
    summary: 'summary',
    researchArea: 'researchArea',
    keywords: 'keywords',
    projectTypes: 'projectTypes',
    targetNumberOfAwards: 'targetNumberOfAwards',
    assistanceOffered: 'assistanceOffered',
    eligibleInstitutionTypes: 'eligibleInstitutionTypes',
    eligibleCountries: 'eligibleCountries',
    eligibleCareerStages: 'eligibleCareerStages',
    requiresProposal: 'requiresProposal',
    proposalTemplateUrl: 'proposalTemplateUrl',
    customApplicationQuestions: 'customApplicationQuestions',
    evaluationCriteria: 'evaluationCriteria',
    fundingType: 'fundingType',
    fundingAmount: 'fundingAmount',
    submissionOpenDate: 'submissionOpenDate',
    submissionDeadline: 'submissionDeadline',
    reviewPeriodStartDate: 'reviewPeriodStartDate',
    notificationDate: 'notificationDate',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId'
  };

  export type OpenCallScalarFieldEnum = (typeof OpenCallScalarFieldEnum)[keyof typeof OpenCallScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    submittedAt: 'submittedAt',
    updatedAt: 'updatedAt',
    submittedCoverLetter: 'submittedCoverLetter',
    customApplicationAnswers: 'customApplicationAnswers',
    offerType: 'offerType',
    offerConditions: 'offerConditions',
    offerRespondedAt: 'offerRespondedAt',
    researcherResponse: 'researcherResponse',
    applicantId: 'applicantId',
    openCallId: 'openCallId',
    submittedProposalId: 'submittedProposalId'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ProjectType[]'
   */
  export type ListEnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType[]'>
    


  /**
   * Reference to a field of type 'ProjectType'
   */
  export type EnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType'>
    


  /**
   * Reference to a field of type 'JobType[]'
   */
  export type ListEnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType[]'>
    


  /**
   * Reference to a field of type 'JobType'
   */
  export type EnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType'>
    


  /**
   * Reference to a field of type 'OpenCallStatus'
   */
  export type EnumOpenCallStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OpenCallStatus'>
    


  /**
   * Reference to a field of type 'OpenCallStatus[]'
   */
  export type ListEnumOpenCallStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OpenCallStatus[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    


  /**
   * Reference to a field of type 'OfferType'
   */
  export type EnumOfferTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OfferType'>
    


  /**
   * Reference to a field of type 'OfferType[]'
   */
  export type ListEnumOfferTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OfferType[]'>
    


  /**
   * Reference to a field of type 'OfferResponse'
   */
  export type EnumOfferResponseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OfferResponse'>
    


  /**
   * Reference to a field of type 'OfferResponse[]'
   */
  export type ListEnumOfferResponseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OfferResponse[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    linkedInId?: StringNullableFilter<"User"> | string | null
    orcidId?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    researcherProfile?: XOR<ResearcherProfileNullableRelationFilter, ResearcherProfileWhereInput> | null
    universityProfile?: XOR<UniversityProfileNullableRelationFilter, UniversityProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    linkedInId?: SortOrderInput | SortOrder
    orcidId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfile?: ResearcherProfileOrderByWithRelationInput
    universityProfile?: UniversityProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    linkedInId?: string
    orcidId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    researcherProfile?: XOR<ResearcherProfileNullableRelationFilter, ResearcherProfileWhereInput> | null
    universityProfile?: XOR<UniversityProfileNullableRelationFilter, UniversityProfileWhereInput> | null
  }, "id" | "email" | "googleId" | "linkedInId" | "orcidId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    linkedInId?: SortOrderInput | SortOrder
    orcidId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    linkedInId?: StringNullableWithAggregatesFilter<"User"> | string | null
    orcidId?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ResearcherProfileWhereInput = {
    AND?: ResearcherProfileWhereInput | ResearcherProfileWhereInput[]
    OR?: ResearcherProfileWhereInput[]
    NOT?: ResearcherProfileWhereInput | ResearcherProfileWhereInput[]
    id?: StringFilter<"ResearcherProfile"> | string
    fullName?: StringFilter<"ResearcherProfile"> | string
    professionalTitle?: StringNullableFilter<"ResearcherProfile"> | string | null
    currentInstitution?: StringNullableFilter<"ResearcherProfile"> | string | null
    currentLocation?: StringNullableFilter<"ResearcherProfile"> | string | null
    createdAt?: DateTimeFilter<"ResearcherProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ResearcherProfile"> | Date | string
    userId?: StringFilter<"ResearcherProfile"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    education?: EducationListRelationFilter
    publications?: PublicationListRelationFilter
    documents?: DocumentListRelationFilter
    proposals?: ProposalListRelationFilter
    applications?: ApplicationListRelationFilter
  }

  export type ResearcherProfileOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    professionalTitle?: SortOrderInput | SortOrder
    currentInstitution?: SortOrderInput | SortOrder
    currentLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    education?: EducationOrderByRelationAggregateInput
    publications?: PublicationOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    proposals?: ProposalOrderByRelationAggregateInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type ResearcherProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ResearcherProfileWhereInput | ResearcherProfileWhereInput[]
    OR?: ResearcherProfileWhereInput[]
    NOT?: ResearcherProfileWhereInput | ResearcherProfileWhereInput[]
    fullName?: StringFilter<"ResearcherProfile"> | string
    professionalTitle?: StringNullableFilter<"ResearcherProfile"> | string | null
    currentInstitution?: StringNullableFilter<"ResearcherProfile"> | string | null
    currentLocation?: StringNullableFilter<"ResearcherProfile"> | string | null
    createdAt?: DateTimeFilter<"ResearcherProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ResearcherProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    education?: EducationListRelationFilter
    publications?: PublicationListRelationFilter
    documents?: DocumentListRelationFilter
    proposals?: ProposalListRelationFilter
    applications?: ApplicationListRelationFilter
  }, "id" | "userId">

  export type ResearcherProfileOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    professionalTitle?: SortOrderInput | SortOrder
    currentInstitution?: SortOrderInput | SortOrder
    currentLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: ResearcherProfileCountOrderByAggregateInput
    _max?: ResearcherProfileMaxOrderByAggregateInput
    _min?: ResearcherProfileMinOrderByAggregateInput
  }

  export type ResearcherProfileScalarWhereWithAggregatesInput = {
    AND?: ResearcherProfileScalarWhereWithAggregatesInput | ResearcherProfileScalarWhereWithAggregatesInput[]
    OR?: ResearcherProfileScalarWhereWithAggregatesInput[]
    NOT?: ResearcherProfileScalarWhereWithAggregatesInput | ResearcherProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResearcherProfile"> | string
    fullName?: StringWithAggregatesFilter<"ResearcherProfile"> | string
    professionalTitle?: StringNullableWithAggregatesFilter<"ResearcherProfile"> | string | null
    currentInstitution?: StringNullableWithAggregatesFilter<"ResearcherProfile"> | string | null
    currentLocation?: StringNullableWithAggregatesFilter<"ResearcherProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ResearcherProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ResearcherProfile"> | Date | string
    userId?: StringWithAggregatesFilter<"ResearcherProfile"> | string
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: StringFilter<"Education"> | string
    degree?: StringFilter<"Education"> | string
    fieldOfStudy?: StringFilter<"Education"> | string
    institution?: StringFilter<"Education"> | string
    country?: StringFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    researcherProfileId?: StringFilter<"Education"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    degree?: SortOrder
    fieldOfStudy?: SortOrder
    institution?: SortOrder
    country?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    researcherProfileId?: SortOrder
    researcherProfile?: ResearcherProfileOrderByWithRelationInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    degree?: StringFilter<"Education"> | string
    fieldOfStudy?: StringFilter<"Education"> | string
    institution?: StringFilter<"Education"> | string
    country?: StringFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    researcherProfileId?: StringFilter<"Education"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }, "id">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    degree?: SortOrder
    fieldOfStudy?: SortOrder
    institution?: SortOrder
    country?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    researcherProfileId?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Education"> | string
    degree?: StringWithAggregatesFilter<"Education"> | string
    fieldOfStudy?: StringWithAggregatesFilter<"Education"> | string
    institution?: StringWithAggregatesFilter<"Education"> | string
    country?: StringWithAggregatesFilter<"Education"> | string
    startDate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Education"> | Date | string | null
    researcherProfileId?: StringWithAggregatesFilter<"Education"> | string
  }

  export type PublicationWhereInput = {
    AND?: PublicationWhereInput | PublicationWhereInput[]
    OR?: PublicationWhereInput[]
    NOT?: PublicationWhereInput | PublicationWhereInput[]
    id?: StringFilter<"Publication"> | string
    title?: StringFilter<"Publication"> | string
    journal?: StringNullableFilter<"Publication"> | string | null
    year?: IntFilter<"Publication"> | number
    link?: StringNullableFilter<"Publication"> | string | null
    researcherProfileId?: StringFilter<"Publication"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }

  export type PublicationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    journal?: SortOrderInput | SortOrder
    year?: SortOrder
    link?: SortOrderInput | SortOrder
    researcherProfileId?: SortOrder
    researcherProfile?: ResearcherProfileOrderByWithRelationInput
  }

  export type PublicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublicationWhereInput | PublicationWhereInput[]
    OR?: PublicationWhereInput[]
    NOT?: PublicationWhereInput | PublicationWhereInput[]
    title?: StringFilter<"Publication"> | string
    journal?: StringNullableFilter<"Publication"> | string | null
    year?: IntFilter<"Publication"> | number
    link?: StringNullableFilter<"Publication"> | string | null
    researcherProfileId?: StringFilter<"Publication"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }, "id">

  export type PublicationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    journal?: SortOrderInput | SortOrder
    year?: SortOrder
    link?: SortOrderInput | SortOrder
    researcherProfileId?: SortOrder
    _count?: PublicationCountOrderByAggregateInput
    _avg?: PublicationAvgOrderByAggregateInput
    _max?: PublicationMaxOrderByAggregateInput
    _min?: PublicationMinOrderByAggregateInput
    _sum?: PublicationSumOrderByAggregateInput
  }

  export type PublicationScalarWhereWithAggregatesInput = {
    AND?: PublicationScalarWhereWithAggregatesInput | PublicationScalarWhereWithAggregatesInput[]
    OR?: PublicationScalarWhereWithAggregatesInput[]
    NOT?: PublicationScalarWhereWithAggregatesInput | PublicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Publication"> | string
    title?: StringWithAggregatesFilter<"Publication"> | string
    journal?: StringNullableWithAggregatesFilter<"Publication"> | string | null
    year?: IntWithAggregatesFilter<"Publication"> | number
    link?: StringNullableWithAggregatesFilter<"Publication"> | string | null
    researcherProfileId?: StringWithAggregatesFilter<"Publication"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    researcherProfileId?: StringFilter<"Document"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    researcherProfileId?: SortOrder
    researcherProfile?: ResearcherProfileOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    name?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    researcherProfileId?: StringFilter<"Document"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    researcherProfileId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    name?: StringWithAggregatesFilter<"Document"> | string
    url?: StringWithAggregatesFilter<"Document"> | string
    type?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    researcherProfileId?: StringWithAggregatesFilter<"Document"> | string
  }

  export type ProposalWhereInput = {
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    id?: StringFilter<"Proposal"> | string
    title?: StringFilter<"Proposal"> | string
    content?: JsonFilter<"Proposal">
    isFinal?: BoolFilter<"Proposal"> | boolean
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    researcherProfileId?: StringFilter<"Proposal"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }

  export type ProposalOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isFinal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfileId?: SortOrder
    researcherProfile?: ResearcherProfileOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type ProposalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    title?: StringFilter<"Proposal"> | string
    content?: JsonFilter<"Proposal">
    isFinal?: BoolFilter<"Proposal"> | boolean
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    researcherProfileId?: StringFilter<"Proposal"> | string
    researcherProfile?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type ProposalOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isFinal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfileId?: SortOrder
    _count?: ProposalCountOrderByAggregateInput
    _max?: ProposalMaxOrderByAggregateInput
    _min?: ProposalMinOrderByAggregateInput
  }

  export type ProposalScalarWhereWithAggregatesInput = {
    AND?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    OR?: ProposalScalarWhereWithAggregatesInput[]
    NOT?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Proposal"> | string
    title?: StringWithAggregatesFilter<"Proposal"> | string
    content?: JsonWithAggregatesFilter<"Proposal">
    isFinal?: BoolWithAggregatesFilter<"Proposal"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    researcherProfileId?: StringWithAggregatesFilter<"Proposal"> | string
  }

  export type UniversityWhereInput = {
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    id?: StringFilter<"University"> | string
    name?: StringFilter<"University"> | string
    country?: StringFilter<"University"> | string
    profiles?: UniversityProfileListRelationFilter
  }

  export type UniversityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    profiles?: UniversityProfileOrderByRelationAggregateInput
  }

  export type UniversityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    country?: StringFilter<"University"> | string
    profiles?: UniversityProfileListRelationFilter
  }, "id" | "name">

  export type UniversityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    _count?: UniversityCountOrderByAggregateInput
    _max?: UniversityMaxOrderByAggregateInput
    _min?: UniversityMinOrderByAggregateInput
  }

  export type UniversityScalarWhereWithAggregatesInput = {
    AND?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    OR?: UniversityScalarWhereWithAggregatesInput[]
    NOT?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"University"> | string
    name?: StringWithAggregatesFilter<"University"> | string
    country?: StringWithAggregatesFilter<"University"> | string
  }

  export type UniversityProfileWhereInput = {
    AND?: UniversityProfileWhereInput | UniversityProfileWhereInput[]
    OR?: UniversityProfileWhereInput[]
    NOT?: UniversityProfileWhereInput | UniversityProfileWhereInput[]
    id?: StringFilter<"UniversityProfile"> | string
    departmentName?: StringFilter<"UniversityProfile"> | string
    faculty?: StringNullableFilter<"UniversityProfile"> | string | null
    logoUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    bannerImageUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    address?: StringNullableFilter<"UniversityProfile"> | string | null
    websiteUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    description?: StringNullableFilter<"UniversityProfile"> | string | null
    createdAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    userId?: StringFilter<"UniversityProfile"> | string
    universityId?: StringFilter<"UniversityProfile"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    university?: XOR<UniversityRelationFilter, UniversityWhereInput>
    openCalls?: OpenCallListRelationFilter
  }

  export type UniversityProfileOrderByWithRelationInput = {
    id?: SortOrder
    departmentName?: SortOrder
    faculty?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    bannerImageUrl?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    universityId?: SortOrder
    user?: UserOrderByWithRelationInput
    university?: UniversityOrderByWithRelationInput
    openCalls?: OpenCallOrderByRelationAggregateInput
  }

  export type UniversityProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UniversityProfileWhereInput | UniversityProfileWhereInput[]
    OR?: UniversityProfileWhereInput[]
    NOT?: UniversityProfileWhereInput | UniversityProfileWhereInput[]
    departmentName?: StringFilter<"UniversityProfile"> | string
    faculty?: StringNullableFilter<"UniversityProfile"> | string | null
    logoUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    bannerImageUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    address?: StringNullableFilter<"UniversityProfile"> | string | null
    websiteUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    description?: StringNullableFilter<"UniversityProfile"> | string | null
    createdAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    universityId?: StringFilter<"UniversityProfile"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    university?: XOR<UniversityRelationFilter, UniversityWhereInput>
    openCalls?: OpenCallListRelationFilter
  }, "id" | "userId">

  export type UniversityProfileOrderByWithAggregationInput = {
    id?: SortOrder
    departmentName?: SortOrder
    faculty?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    bannerImageUrl?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    universityId?: SortOrder
    _count?: UniversityProfileCountOrderByAggregateInput
    _max?: UniversityProfileMaxOrderByAggregateInput
    _min?: UniversityProfileMinOrderByAggregateInput
  }

  export type UniversityProfileScalarWhereWithAggregatesInput = {
    AND?: UniversityProfileScalarWhereWithAggregatesInput | UniversityProfileScalarWhereWithAggregatesInput[]
    OR?: UniversityProfileScalarWhereWithAggregatesInput[]
    NOT?: UniversityProfileScalarWhereWithAggregatesInput | UniversityProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UniversityProfile"> | string
    departmentName?: StringWithAggregatesFilter<"UniversityProfile"> | string
    faculty?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    bannerImageUrl?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    address?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    description?: StringNullableWithAggregatesFilter<"UniversityProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UniversityProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UniversityProfile"> | Date | string
    userId?: StringWithAggregatesFilter<"UniversityProfile"> | string
    universityId?: StringWithAggregatesFilter<"UniversityProfile"> | string
  }

  export type OpenCallWhereInput = {
    AND?: OpenCallWhereInput | OpenCallWhereInput[]
    OR?: OpenCallWhereInput[]
    NOT?: OpenCallWhereInput | OpenCallWhereInput[]
    id?: StringFilter<"OpenCall"> | string
    title?: StringFilter<"OpenCall"> | string
    summary?: StringFilter<"OpenCall"> | string
    researchArea?: StringFilter<"OpenCall"> | string
    keywords?: StringNullableListFilter<"OpenCall">
    projectTypes?: EnumProjectTypeNullableListFilter<"OpenCall">
    targetNumberOfAwards?: IntFilter<"OpenCall"> | number
    assistanceOffered?: StringNullableFilter<"OpenCall"> | string | null
    eligibleInstitutionTypes?: StringNullableListFilter<"OpenCall">
    eligibleCountries?: StringNullableListFilter<"OpenCall">
    eligibleCareerStages?: EnumJobTypeNullableListFilter<"OpenCall">
    requiresProposal?: BoolFilter<"OpenCall"> | boolean
    proposalTemplateUrl?: StringNullableFilter<"OpenCall"> | string | null
    customApplicationQuestions?: JsonNullableFilter<"OpenCall">
    evaluationCriteria?: JsonNullableFilter<"OpenCall">
    fundingType?: StringFilter<"OpenCall"> | string
    fundingAmount?: StringFilter<"OpenCall"> | string
    submissionOpenDate?: DateTimeFilter<"OpenCall"> | Date | string
    submissionDeadline?: DateTimeFilter<"OpenCall"> | Date | string
    reviewPeriodStartDate?: DateTimeFilter<"OpenCall"> | Date | string
    notificationDate?: DateTimeFilter<"OpenCall"> | Date | string
    status?: EnumOpenCallStatusFilter<"OpenCall"> | $Enums.OpenCallStatus
    createdAt?: DateTimeFilter<"OpenCall"> | Date | string
    updatedAt?: DateTimeFilter<"OpenCall"> | Date | string
    authorId?: StringFilter<"OpenCall"> | string
    author?: XOR<UniversityProfileRelationFilter, UniversityProfileWhereInput>
    applications?: ApplicationListRelationFilter
  }

  export type OpenCallOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    researchArea?: SortOrder
    keywords?: SortOrder
    projectTypes?: SortOrder
    targetNumberOfAwards?: SortOrder
    assistanceOffered?: SortOrderInput | SortOrder
    eligibleInstitutionTypes?: SortOrder
    eligibleCountries?: SortOrder
    eligibleCareerStages?: SortOrder
    requiresProposal?: SortOrder
    proposalTemplateUrl?: SortOrderInput | SortOrder
    customApplicationQuestions?: SortOrderInput | SortOrder
    evaluationCriteria?: SortOrderInput | SortOrder
    fundingType?: SortOrder
    fundingAmount?: SortOrder
    submissionOpenDate?: SortOrder
    submissionDeadline?: SortOrder
    reviewPeriodStartDate?: SortOrder
    notificationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    author?: UniversityProfileOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type OpenCallWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OpenCallWhereInput | OpenCallWhereInput[]
    OR?: OpenCallWhereInput[]
    NOT?: OpenCallWhereInput | OpenCallWhereInput[]
    title?: StringFilter<"OpenCall"> | string
    summary?: StringFilter<"OpenCall"> | string
    researchArea?: StringFilter<"OpenCall"> | string
    keywords?: StringNullableListFilter<"OpenCall">
    projectTypes?: EnumProjectTypeNullableListFilter<"OpenCall">
    targetNumberOfAwards?: IntFilter<"OpenCall"> | number
    assistanceOffered?: StringNullableFilter<"OpenCall"> | string | null
    eligibleInstitutionTypes?: StringNullableListFilter<"OpenCall">
    eligibleCountries?: StringNullableListFilter<"OpenCall">
    eligibleCareerStages?: EnumJobTypeNullableListFilter<"OpenCall">
    requiresProposal?: BoolFilter<"OpenCall"> | boolean
    proposalTemplateUrl?: StringNullableFilter<"OpenCall"> | string | null
    customApplicationQuestions?: JsonNullableFilter<"OpenCall">
    evaluationCriteria?: JsonNullableFilter<"OpenCall">
    fundingType?: StringFilter<"OpenCall"> | string
    fundingAmount?: StringFilter<"OpenCall"> | string
    submissionOpenDate?: DateTimeFilter<"OpenCall"> | Date | string
    submissionDeadline?: DateTimeFilter<"OpenCall"> | Date | string
    reviewPeriodStartDate?: DateTimeFilter<"OpenCall"> | Date | string
    notificationDate?: DateTimeFilter<"OpenCall"> | Date | string
    status?: EnumOpenCallStatusFilter<"OpenCall"> | $Enums.OpenCallStatus
    createdAt?: DateTimeFilter<"OpenCall"> | Date | string
    updatedAt?: DateTimeFilter<"OpenCall"> | Date | string
    authorId?: StringFilter<"OpenCall"> | string
    author?: XOR<UniversityProfileRelationFilter, UniversityProfileWhereInput>
    applications?: ApplicationListRelationFilter
  }, "id">

  export type OpenCallOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    researchArea?: SortOrder
    keywords?: SortOrder
    projectTypes?: SortOrder
    targetNumberOfAwards?: SortOrder
    assistanceOffered?: SortOrderInput | SortOrder
    eligibleInstitutionTypes?: SortOrder
    eligibleCountries?: SortOrder
    eligibleCareerStages?: SortOrder
    requiresProposal?: SortOrder
    proposalTemplateUrl?: SortOrderInput | SortOrder
    customApplicationQuestions?: SortOrderInput | SortOrder
    evaluationCriteria?: SortOrderInput | SortOrder
    fundingType?: SortOrder
    fundingAmount?: SortOrder
    submissionOpenDate?: SortOrder
    submissionDeadline?: SortOrder
    reviewPeriodStartDate?: SortOrder
    notificationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    _count?: OpenCallCountOrderByAggregateInput
    _avg?: OpenCallAvgOrderByAggregateInput
    _max?: OpenCallMaxOrderByAggregateInput
    _min?: OpenCallMinOrderByAggregateInput
    _sum?: OpenCallSumOrderByAggregateInput
  }

  export type OpenCallScalarWhereWithAggregatesInput = {
    AND?: OpenCallScalarWhereWithAggregatesInput | OpenCallScalarWhereWithAggregatesInput[]
    OR?: OpenCallScalarWhereWithAggregatesInput[]
    NOT?: OpenCallScalarWhereWithAggregatesInput | OpenCallScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OpenCall"> | string
    title?: StringWithAggregatesFilter<"OpenCall"> | string
    summary?: StringWithAggregatesFilter<"OpenCall"> | string
    researchArea?: StringWithAggregatesFilter<"OpenCall"> | string
    keywords?: StringNullableListFilter<"OpenCall">
    projectTypes?: EnumProjectTypeNullableListFilter<"OpenCall">
    targetNumberOfAwards?: IntWithAggregatesFilter<"OpenCall"> | number
    assistanceOffered?: StringNullableWithAggregatesFilter<"OpenCall"> | string | null
    eligibleInstitutionTypes?: StringNullableListFilter<"OpenCall">
    eligibleCountries?: StringNullableListFilter<"OpenCall">
    eligibleCareerStages?: EnumJobTypeNullableListFilter<"OpenCall">
    requiresProposal?: BoolWithAggregatesFilter<"OpenCall"> | boolean
    proposalTemplateUrl?: StringNullableWithAggregatesFilter<"OpenCall"> | string | null
    customApplicationQuestions?: JsonNullableWithAggregatesFilter<"OpenCall">
    evaluationCriteria?: JsonNullableWithAggregatesFilter<"OpenCall">
    fundingType?: StringWithAggregatesFilter<"OpenCall"> | string
    fundingAmount?: StringWithAggregatesFilter<"OpenCall"> | string
    submissionOpenDate?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    submissionDeadline?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    reviewPeriodStartDate?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    notificationDate?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    status?: EnumOpenCallStatusWithAggregatesFilter<"OpenCall"> | $Enums.OpenCallStatus
    createdAt?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OpenCall"> | Date | string
    authorId?: StringWithAggregatesFilter<"OpenCall"> | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: StringFilter<"Application"> | string
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    submittedAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    submittedCoverLetter?: StringNullableFilter<"Application"> | string | null
    customApplicationAnswers?: JsonNullableFilter<"Application">
    offerType?: EnumOfferTypeNullableFilter<"Application"> | $Enums.OfferType | null
    offerConditions?: StringNullableFilter<"Application"> | string | null
    offerRespondedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    researcherResponse?: EnumOfferResponseNullableFilter<"Application"> | $Enums.OfferResponse | null
    applicantId?: StringFilter<"Application"> | string
    openCallId?: StringFilter<"Application"> | string
    submittedProposalId?: StringNullableFilter<"Application"> | string | null
    applicant?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
    openCall?: XOR<OpenCallRelationFilter, OpenCallWhereInput>
    submittedProposal?: XOR<ProposalNullableRelationFilter, ProposalWhereInput> | null
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    submittedCoverLetter?: SortOrderInput | SortOrder
    customApplicationAnswers?: SortOrderInput | SortOrder
    offerType?: SortOrderInput | SortOrder
    offerConditions?: SortOrderInput | SortOrder
    offerRespondedAt?: SortOrderInput | SortOrder
    researcherResponse?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    openCallId?: SortOrder
    submittedProposalId?: SortOrderInput | SortOrder
    applicant?: ResearcherProfileOrderByWithRelationInput
    openCall?: OpenCallOrderByWithRelationInput
    submittedProposal?: ProposalOrderByWithRelationInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    submittedProposalId?: string
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    submittedAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    submittedCoverLetter?: StringNullableFilter<"Application"> | string | null
    customApplicationAnswers?: JsonNullableFilter<"Application">
    offerType?: EnumOfferTypeNullableFilter<"Application"> | $Enums.OfferType | null
    offerConditions?: StringNullableFilter<"Application"> | string | null
    offerRespondedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    researcherResponse?: EnumOfferResponseNullableFilter<"Application"> | $Enums.OfferResponse | null
    applicantId?: StringFilter<"Application"> | string
    openCallId?: StringFilter<"Application"> | string
    applicant?: XOR<ResearcherProfileRelationFilter, ResearcherProfileWhereInput>
    openCall?: XOR<OpenCallRelationFilter, OpenCallWhereInput>
    submittedProposal?: XOR<ProposalNullableRelationFilter, ProposalWhereInput> | null
  }, "id" | "submittedProposalId">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    submittedCoverLetter?: SortOrderInput | SortOrder
    customApplicationAnswers?: SortOrderInput | SortOrder
    offerType?: SortOrderInput | SortOrder
    offerConditions?: SortOrderInput | SortOrder
    offerRespondedAt?: SortOrderInput | SortOrder
    researcherResponse?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    openCallId?: SortOrder
    submittedProposalId?: SortOrderInput | SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Application"> | string
    status?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    submittedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    submittedCoverLetter?: StringNullableWithAggregatesFilter<"Application"> | string | null
    customApplicationAnswers?: JsonNullableWithAggregatesFilter<"Application">
    offerType?: EnumOfferTypeNullableWithAggregatesFilter<"Application"> | $Enums.OfferType | null
    offerConditions?: StringNullableWithAggregatesFilter<"Application"> | string | null
    offerRespondedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    researcherResponse?: EnumOfferResponseNullableWithAggregatesFilter<"Application"> | $Enums.OfferResponse | null
    applicantId?: StringWithAggregatesFilter<"Application"> | string
    openCallId?: StringWithAggregatesFilter<"Application"> | string
    submittedProposalId?: StringNullableWithAggregatesFilter<"Application"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile?: ResearcherProfileCreateNestedOneWithoutUserInput
    universityProfile?: UniversityProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile?: ResearcherProfileUncheckedCreateNestedOneWithoutUserInput
    universityProfile?: UniversityProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUpdateOneWithoutUserNestedInput
    universityProfile?: UniversityProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUncheckedUpdateOneWithoutUserNestedInput
    universityProfile?: UniversityProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearcherProfileCreateInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileCreateManyInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ResearcherProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearcherProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
    researcherProfile: ResearcherProfileCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
    researcherProfileId: string
  }

  export type EducationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherProfile?: ResearcherProfileUpdateOneRequiredWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateManyInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
    researcherProfileId: string
  }

  export type EducationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type PublicationCreateInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
    researcherProfile: ResearcherProfileCreateNestedOneWithoutPublicationsInput
  }

  export type PublicationUncheckedCreateInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
    researcherProfileId: string
  }

  export type PublicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
    researcherProfile?: ResearcherProfileUpdateOneRequiredWithoutPublicationsNestedInput
  }

  export type PublicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type PublicationCreateManyInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
    researcherProfileId: string
  }

  export type PublicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
    researcherProfile: ResearcherProfileCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
    researcherProfileId: string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    researcherProfile?: ResearcherProfileUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
    researcherProfileId: string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type ProposalCreateInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile: ResearcherProfileCreateNestedOneWithoutProposalsInput
    application?: ApplicationCreateNestedOneWithoutSubmittedProposalInput
  }

  export type ProposalUncheckedCreateInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfileId: string
    application?: ApplicationUncheckedCreateNestedOneWithoutSubmittedProposalInput
  }

  export type ProposalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUpdateOneRequiredWithoutProposalsNestedInput
    application?: ApplicationUpdateOneWithoutSubmittedProposalNestedInput
  }

  export type ProposalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfileId?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUncheckedUpdateOneWithoutSubmittedProposalNestedInput
  }

  export type ProposalCreateManyInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfileId: string
  }

  export type ProposalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityCreateInput = {
    id?: string
    name: string
    country: string
    profiles?: UniversityProfileCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUncheckedCreateInput = {
    id?: string
    name: string
    country: string
    profiles?: UniversityProfileUncheckedCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    profiles?: UniversityProfileUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    profiles?: UniversityProfileUncheckedUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityCreateManyInput = {
    id?: string
    name: string
    country: string
  }

  export type UniversityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityProfileCreateInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUniversityProfileInput
    university: UniversityCreateNestedOneWithoutProfilesInput
    openCalls?: OpenCallCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileUncheckedCreateInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    universityId: string
    openCalls?: OpenCallUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUniversityProfileNestedInput
    university?: UniversityUpdateOneRequiredWithoutProfilesNestedInput
    openCalls?: OpenCallUpdateManyWithoutAuthorNestedInput
  }

  export type UniversityProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    universityId?: StringFieldUpdateOperationsInput | string
    openCalls?: OpenCallUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UniversityProfileCreateManyInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    universityId: string
  }

  export type UniversityProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UniversityProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    universityId?: StringFieldUpdateOperationsInput | string
  }

  export type OpenCallCreateInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UniversityProfileCreateNestedOneWithoutOpenCallsInput
    applications?: ApplicationCreateNestedManyWithoutOpenCallInput
  }

  export type OpenCallUncheckedCreateInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutOpenCallInput
  }

  export type OpenCallUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UniversityProfileUpdateOneRequiredWithoutOpenCallsNestedInput
    applications?: ApplicationUpdateManyWithoutOpenCallNestedInput
  }

  export type OpenCallUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutOpenCallNestedInput
  }

  export type OpenCallCreateManyInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type OpenCallUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenCallUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationCreateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicant: ResearcherProfileCreateNestedOneWithoutApplicationsInput
    openCall: OpenCallCreateNestedOneWithoutApplicationsInput
    submittedProposal?: ProposalCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicantId: string
    openCallId: string
    submittedProposalId?: string | null
  }

  export type ApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicant?: ResearcherProfileUpdateOneRequiredWithoutApplicationsNestedInput
    openCall?: OpenCallUpdateOneRequiredWithoutApplicationsNestedInput
    submittedProposal?: ProposalUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicantId?: StringFieldUpdateOperationsInput | string
    openCallId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateManyInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicantId: string
    openCallId: string
    submittedProposalId?: string | null
  }

  export type ApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicantId?: StringFieldUpdateOperationsInput | string
    openCallId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ResearcherProfileNullableRelationFilter = {
    is?: ResearcherProfileWhereInput | null
    isNot?: ResearcherProfileWhereInput | null
  }

  export type UniversityProfileNullableRelationFilter = {
    is?: UniversityProfileWhereInput | null
    isNot?: UniversityProfileWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    linkedInId?: SortOrder
    orcidId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    linkedInId?: SortOrder
    orcidId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleId?: SortOrder
    linkedInId?: SortOrder
    orcidId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type PublicationListRelationFilter = {
    every?: PublicationWhereInput
    some?: PublicationWhereInput
    none?: PublicationWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ProposalListRelationFilter = {
    every?: ProposalWhereInput
    some?: ProposalWhereInput
    none?: ProposalWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProposalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResearcherProfileCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    professionalTitle?: SortOrder
    currentInstitution?: SortOrder
    currentLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ResearcherProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    professionalTitle?: SortOrder
    currentInstitution?: SortOrder
    currentLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ResearcherProfileMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    professionalTitle?: SortOrder
    currentInstitution?: SortOrder
    currentLocation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ResearcherProfileRelationFilter = {
    is?: ResearcherProfileWhereInput
    isNot?: ResearcherProfileWhereInput
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    degree?: SortOrder
    fieldOfStudy?: SortOrder
    institution?: SortOrder
    country?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    degree?: SortOrder
    fieldOfStudy?: SortOrder
    institution?: SortOrder
    country?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    degree?: SortOrder
    fieldOfStudy?: SortOrder
    institution?: SortOrder
    country?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PublicationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    journal?: SortOrder
    year?: SortOrder
    link?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type PublicationAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type PublicationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    journal?: SortOrder
    year?: SortOrder
    link?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type PublicationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    journal?: SortOrder
    year?: SortOrder
    link?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type PublicationSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ApplicationNullableRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type ProposalCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isFinal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type ProposalMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    isFinal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfileId?: SortOrder
  }

  export type ProposalMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    isFinal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    researcherProfileId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UniversityProfileListRelationFilter = {
    every?: UniversityProfileWhereInput
    some?: UniversityProfileWhereInput
    none?: UniversityProfileWhereInput
  }

  export type UniversityProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UniversityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type UniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type UniversityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
  }

  export type UniversityRelationFilter = {
    is?: UniversityWhereInput
    isNot?: UniversityWhereInput
  }

  export type OpenCallListRelationFilter = {
    every?: OpenCallWhereInput
    some?: OpenCallWhereInput
    none?: OpenCallWhereInput
  }

  export type OpenCallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UniversityProfileCountOrderByAggregateInput = {
    id?: SortOrder
    departmentName?: SortOrder
    faculty?: SortOrder
    logoUrl?: SortOrder
    bannerImageUrl?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    universityId?: SortOrder
  }

  export type UniversityProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    departmentName?: SortOrder
    faculty?: SortOrder
    logoUrl?: SortOrder
    bannerImageUrl?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    universityId?: SortOrder
  }

  export type UniversityProfileMinOrderByAggregateInput = {
    id?: SortOrder
    departmentName?: SortOrder
    faculty?: SortOrder
    logoUrl?: SortOrder
    bannerImageUrl?: SortOrder
    address?: SortOrder
    websiteUrl?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    universityId?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumProjectTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumJobTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumOpenCallStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OpenCallStatus | EnumOpenCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOpenCallStatusFilter<$PrismaModel> | $Enums.OpenCallStatus
  }

  export type UniversityProfileRelationFilter = {
    is?: UniversityProfileWhereInput
    isNot?: UniversityProfileWhereInput
  }

  export type OpenCallCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    researchArea?: SortOrder
    keywords?: SortOrder
    projectTypes?: SortOrder
    targetNumberOfAwards?: SortOrder
    assistanceOffered?: SortOrder
    eligibleInstitutionTypes?: SortOrder
    eligibleCountries?: SortOrder
    eligibleCareerStages?: SortOrder
    requiresProposal?: SortOrder
    proposalTemplateUrl?: SortOrder
    customApplicationQuestions?: SortOrder
    evaluationCriteria?: SortOrder
    fundingType?: SortOrder
    fundingAmount?: SortOrder
    submissionOpenDate?: SortOrder
    submissionDeadline?: SortOrder
    reviewPeriodStartDate?: SortOrder
    notificationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type OpenCallAvgOrderByAggregateInput = {
    targetNumberOfAwards?: SortOrder
  }

  export type OpenCallMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    researchArea?: SortOrder
    targetNumberOfAwards?: SortOrder
    assistanceOffered?: SortOrder
    requiresProposal?: SortOrder
    proposalTemplateUrl?: SortOrder
    fundingType?: SortOrder
    fundingAmount?: SortOrder
    submissionOpenDate?: SortOrder
    submissionDeadline?: SortOrder
    reviewPeriodStartDate?: SortOrder
    notificationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type OpenCallMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    researchArea?: SortOrder
    targetNumberOfAwards?: SortOrder
    assistanceOffered?: SortOrder
    requiresProposal?: SortOrder
    proposalTemplateUrl?: SortOrder
    fundingType?: SortOrder
    fundingAmount?: SortOrder
    submissionOpenDate?: SortOrder
    submissionDeadline?: SortOrder
    reviewPeriodStartDate?: SortOrder
    notificationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type OpenCallSumOrderByAggregateInput = {
    targetNumberOfAwards?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumOpenCallStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OpenCallStatus | EnumOpenCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOpenCallStatusWithAggregatesFilter<$PrismaModel> | $Enums.OpenCallStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOpenCallStatusFilter<$PrismaModel>
    _max?: NestedEnumOpenCallStatusFilter<$PrismaModel>
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type EnumOfferTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferType | EnumOfferTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferTypeNullableFilter<$PrismaModel> | $Enums.OfferType | null
  }

  export type EnumOfferResponseNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferResponse | EnumOfferResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferResponseNullableFilter<$PrismaModel> | $Enums.OfferResponse | null
  }

  export type OpenCallRelationFilter = {
    is?: OpenCallWhereInput
    isNot?: OpenCallWhereInput
  }

  export type ProposalNullableRelationFilter = {
    is?: ProposalWhereInput | null
    isNot?: ProposalWhereInput | null
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    submittedCoverLetter?: SortOrder
    customApplicationAnswers?: SortOrder
    offerType?: SortOrder
    offerConditions?: SortOrder
    offerRespondedAt?: SortOrder
    researcherResponse?: SortOrder
    applicantId?: SortOrder
    openCallId?: SortOrder
    submittedProposalId?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    submittedCoverLetter?: SortOrder
    offerType?: SortOrder
    offerConditions?: SortOrder
    offerRespondedAt?: SortOrder
    researcherResponse?: SortOrder
    applicantId?: SortOrder
    openCallId?: SortOrder
    submittedProposalId?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    submittedCoverLetter?: SortOrder
    offerType?: SortOrder
    offerConditions?: SortOrder
    offerRespondedAt?: SortOrder
    researcherResponse?: SortOrder
    applicantId?: SortOrder
    openCallId?: SortOrder
    submittedProposalId?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type EnumOfferTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferType | EnumOfferTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OfferType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOfferTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOfferTypeNullableFilter<$PrismaModel>
  }

  export type EnumOfferResponseNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferResponse | EnumOfferResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferResponseNullableWithAggregatesFilter<$PrismaModel> | $Enums.OfferResponse | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOfferResponseNullableFilter<$PrismaModel>
    _max?: NestedEnumOfferResponseNullableFilter<$PrismaModel>
  }

  export type ResearcherProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutUserInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type UniversityProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUserInput
    connect?: UniversityProfileWhereUniqueInput
  }

  export type ResearcherProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutUserInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type UniversityProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUserInput
    connect?: UniversityProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ResearcherProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutUserInput
    upsert?: ResearcherProfileUpsertWithoutUserInput
    disconnect?: ResearcherProfileWhereInput | boolean
    delete?: ResearcherProfileWhereInput | boolean
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutUserInput, ResearcherProfileUpdateWithoutUserInput>, ResearcherProfileUncheckedUpdateWithoutUserInput>
  }

  export type UniversityProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUserInput
    upsert?: UniversityProfileUpsertWithoutUserInput
    disconnect?: UniversityProfileWhereInput | boolean
    delete?: UniversityProfileWhereInput | boolean
    connect?: UniversityProfileWhereUniqueInput
    update?: XOR<XOR<UniversityProfileUpdateToOneWithWhereWithoutUserInput, UniversityProfileUpdateWithoutUserInput>, UniversityProfileUncheckedUpdateWithoutUserInput>
  }

  export type ResearcherProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutUserInput
    upsert?: ResearcherProfileUpsertWithoutUserInput
    disconnect?: ResearcherProfileWhereInput | boolean
    delete?: ResearcherProfileWhereInput | boolean
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutUserInput, ResearcherProfileUpdateWithoutUserInput>, ResearcherProfileUncheckedUpdateWithoutUserInput>
  }

  export type UniversityProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUserInput
    upsert?: UniversityProfileUpsertWithoutUserInput
    disconnect?: UniversityProfileWhereInput | boolean
    delete?: UniversityProfileWhereInput | boolean
    connect?: UniversityProfileWhereUniqueInput
    update?: XOR<XOR<UniversityProfileUpdateToOneWithWhereWithoutUserInput, UniversityProfileUpdateWithoutUserInput>, UniversityProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutResearcherProfileInput = {
    create?: XOR<UserCreateWithoutResearcherProfileInput, UserUncheckedCreateWithoutResearcherProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutResearcherProfileInput
    connect?: UserWhereUniqueInput
  }

  export type EducationCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput> | EducationCreateWithoutResearcherProfileInput[] | EducationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResearcherProfileInput | EducationCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: EducationCreateManyResearcherProfileInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type PublicationCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput> | PublicationCreateWithoutResearcherProfileInput[] | PublicationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: PublicationCreateOrConnectWithoutResearcherProfileInput | PublicationCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: PublicationCreateManyResearcherProfileInputEnvelope
    connect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput> | DocumentCreateWithoutResearcherProfileInput[] | DocumentUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutResearcherProfileInput | DocumentCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: DocumentCreateManyResearcherProfileInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ProposalCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput> | ProposalCreateWithoutResearcherProfileInput[] | ProposalUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutResearcherProfileInput | ProposalCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: ProposalCreateManyResearcherProfileInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput> | EducationCreateWithoutResearcherProfileInput[] | EducationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResearcherProfileInput | EducationCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: EducationCreateManyResearcherProfileInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput> | PublicationCreateWithoutResearcherProfileInput[] | PublicationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: PublicationCreateOrConnectWithoutResearcherProfileInput | PublicationCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: PublicationCreateManyResearcherProfileInputEnvelope
    connect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput> | DocumentCreateWithoutResearcherProfileInput[] | DocumentUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutResearcherProfileInput | DocumentCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: DocumentCreateManyResearcherProfileInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput = {
    create?: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput> | ProposalCreateWithoutResearcherProfileInput[] | ProposalUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutResearcherProfileInput | ProposalCreateOrConnectWithoutResearcherProfileInput[]
    createMany?: ProposalCreateManyResearcherProfileInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutResearcherProfileNestedInput = {
    create?: XOR<UserCreateWithoutResearcherProfileInput, UserUncheckedCreateWithoutResearcherProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutResearcherProfileInput
    upsert?: UserUpsertWithoutResearcherProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResearcherProfileInput, UserUpdateWithoutResearcherProfileInput>, UserUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type EducationUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput> | EducationCreateWithoutResearcherProfileInput[] | EducationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResearcherProfileInput | EducationCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutResearcherProfileInput | EducationUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: EducationCreateManyResearcherProfileInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutResearcherProfileInput | EducationUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutResearcherProfileInput | EducationUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type PublicationUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput> | PublicationCreateWithoutResearcherProfileInput[] | PublicationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: PublicationCreateOrConnectWithoutResearcherProfileInput | PublicationCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: PublicationUpsertWithWhereUniqueWithoutResearcherProfileInput | PublicationUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: PublicationCreateManyResearcherProfileInputEnvelope
    set?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    disconnect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    delete?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    connect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    update?: PublicationUpdateWithWhereUniqueWithoutResearcherProfileInput | PublicationUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: PublicationUpdateManyWithWhereWithoutResearcherProfileInput | PublicationUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: PublicationScalarWhereInput | PublicationScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput> | DocumentCreateWithoutResearcherProfileInput[] | DocumentUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutResearcherProfileInput | DocumentCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutResearcherProfileInput | DocumentUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: DocumentCreateManyResearcherProfileInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutResearcherProfileInput | DocumentUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutResearcherProfileInput | DocumentUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ProposalUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput> | ProposalCreateWithoutResearcherProfileInput[] | ProposalUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutResearcherProfileInput | ProposalCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutResearcherProfileInput | ProposalUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: ProposalCreateManyResearcherProfileInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutResearcherProfileInput | ProposalUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutResearcherProfileInput | ProposalUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutApplicantInput | ApplicationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutApplicantInput | ApplicationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutApplicantInput | ApplicationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput> | EducationCreateWithoutResearcherProfileInput[] | EducationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutResearcherProfileInput | EducationCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutResearcherProfileInput | EducationUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: EducationCreateManyResearcherProfileInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutResearcherProfileInput | EducationUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutResearcherProfileInput | EducationUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput> | PublicationCreateWithoutResearcherProfileInput[] | PublicationUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: PublicationCreateOrConnectWithoutResearcherProfileInput | PublicationCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: PublicationUpsertWithWhereUniqueWithoutResearcherProfileInput | PublicationUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: PublicationCreateManyResearcherProfileInputEnvelope
    set?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    disconnect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    delete?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    connect?: PublicationWhereUniqueInput | PublicationWhereUniqueInput[]
    update?: PublicationUpdateWithWhereUniqueWithoutResearcherProfileInput | PublicationUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: PublicationUpdateManyWithWhereWithoutResearcherProfileInput | PublicationUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: PublicationScalarWhereInput | PublicationScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput> | DocumentCreateWithoutResearcherProfileInput[] | DocumentUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutResearcherProfileInput | DocumentCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutResearcherProfileInput | DocumentUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: DocumentCreateManyResearcherProfileInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutResearcherProfileInput | DocumentUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutResearcherProfileInput | DocumentUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput = {
    create?: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput> | ProposalCreateWithoutResearcherProfileInput[] | ProposalUncheckedCreateWithoutResearcherProfileInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutResearcherProfileInput | ProposalCreateOrConnectWithoutResearcherProfileInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutResearcherProfileInput | ProposalUpsertWithWhereUniqueWithoutResearcherProfileInput[]
    createMany?: ProposalCreateManyResearcherProfileInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutResearcherProfileInput | ProposalUpdateWithWhereUniqueWithoutResearcherProfileInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutResearcherProfileInput | ProposalUpdateManyWithWhereWithoutResearcherProfileInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutApplicantInput | ApplicationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutApplicantInput | ApplicationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutApplicantInput | ApplicationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ResearcherProfileCreateNestedOneWithoutEducationInput = {
    create?: XOR<ResearcherProfileCreateWithoutEducationInput, ResearcherProfileUncheckedCreateWithoutEducationInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutEducationInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ResearcherProfileUpdateOneRequiredWithoutEducationNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutEducationInput, ResearcherProfileUncheckedCreateWithoutEducationInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutEducationInput
    upsert?: ResearcherProfileUpsertWithoutEducationInput
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutEducationInput, ResearcherProfileUpdateWithoutEducationInput>, ResearcherProfileUncheckedUpdateWithoutEducationInput>
  }

  export type ResearcherProfileCreateNestedOneWithoutPublicationsInput = {
    create?: XOR<ResearcherProfileCreateWithoutPublicationsInput, ResearcherProfileUncheckedCreateWithoutPublicationsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutPublicationsInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ResearcherProfileUpdateOneRequiredWithoutPublicationsNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutPublicationsInput, ResearcherProfileUncheckedCreateWithoutPublicationsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutPublicationsInput
    upsert?: ResearcherProfileUpsertWithoutPublicationsInput
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutPublicationsInput, ResearcherProfileUpdateWithoutPublicationsInput>, ResearcherProfileUncheckedUpdateWithoutPublicationsInput>
  }

  export type ResearcherProfileCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ResearcherProfileCreateWithoutDocumentsInput, ResearcherProfileUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutDocumentsInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type ResearcherProfileUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutDocumentsInput, ResearcherProfileUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutDocumentsInput
    upsert?: ResearcherProfileUpsertWithoutDocumentsInput
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutDocumentsInput, ResearcherProfileUpdateWithoutDocumentsInput>, ResearcherProfileUncheckedUpdateWithoutDocumentsInput>
  }

  export type ResearcherProfileCreateNestedOneWithoutProposalsInput = {
    create?: XOR<ResearcherProfileCreateWithoutProposalsInput, ResearcherProfileUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutProposalsInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutSubmittedProposalInput = {
    create?: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSubmittedProposalInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedOneWithoutSubmittedProposalInput = {
    create?: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSubmittedProposalInput
    connect?: ApplicationWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ResearcherProfileUpdateOneRequiredWithoutProposalsNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutProposalsInput, ResearcherProfileUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutProposalsInput
    upsert?: ResearcherProfileUpsertWithoutProposalsInput
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutProposalsInput, ResearcherProfileUpdateWithoutProposalsInput>, ResearcherProfileUncheckedUpdateWithoutProposalsInput>
  }

  export type ApplicationUpdateOneWithoutSubmittedProposalNestedInput = {
    create?: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSubmittedProposalInput
    upsert?: ApplicationUpsertWithoutSubmittedProposalInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutSubmittedProposalInput, ApplicationUpdateWithoutSubmittedProposalInput>, ApplicationUncheckedUpdateWithoutSubmittedProposalInput>
  }

  export type ApplicationUncheckedUpdateOneWithoutSubmittedProposalNestedInput = {
    create?: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSubmittedProposalInput
    upsert?: ApplicationUpsertWithoutSubmittedProposalInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutSubmittedProposalInput, ApplicationUpdateWithoutSubmittedProposalInput>, ApplicationUncheckedUpdateWithoutSubmittedProposalInput>
  }

  export type UniversityProfileCreateNestedManyWithoutUniversityInput = {
    create?: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput> | UniversityProfileCreateWithoutUniversityInput[] | UniversityProfileUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUniversityInput | UniversityProfileCreateOrConnectWithoutUniversityInput[]
    createMany?: UniversityProfileCreateManyUniversityInputEnvelope
    connect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
  }

  export type UniversityProfileUncheckedCreateNestedManyWithoutUniversityInput = {
    create?: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput> | UniversityProfileCreateWithoutUniversityInput[] | UniversityProfileUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUniversityInput | UniversityProfileCreateOrConnectWithoutUniversityInput[]
    createMany?: UniversityProfileCreateManyUniversityInputEnvelope
    connect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
  }

  export type UniversityProfileUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput> | UniversityProfileCreateWithoutUniversityInput[] | UniversityProfileUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUniversityInput | UniversityProfileCreateOrConnectWithoutUniversityInput[]
    upsert?: UniversityProfileUpsertWithWhereUniqueWithoutUniversityInput | UniversityProfileUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: UniversityProfileCreateManyUniversityInputEnvelope
    set?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    disconnect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    delete?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    connect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    update?: UniversityProfileUpdateWithWhereUniqueWithoutUniversityInput | UniversityProfileUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: UniversityProfileUpdateManyWithWhereWithoutUniversityInput | UniversityProfileUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: UniversityProfileScalarWhereInput | UniversityProfileScalarWhereInput[]
  }

  export type UniversityProfileUncheckedUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput> | UniversityProfileCreateWithoutUniversityInput[] | UniversityProfileUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutUniversityInput | UniversityProfileCreateOrConnectWithoutUniversityInput[]
    upsert?: UniversityProfileUpsertWithWhereUniqueWithoutUniversityInput | UniversityProfileUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: UniversityProfileCreateManyUniversityInputEnvelope
    set?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    disconnect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    delete?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    connect?: UniversityProfileWhereUniqueInput | UniversityProfileWhereUniqueInput[]
    update?: UniversityProfileUpdateWithWhereUniqueWithoutUniversityInput | UniversityProfileUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: UniversityProfileUpdateManyWithWhereWithoutUniversityInput | UniversityProfileUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: UniversityProfileScalarWhereInput | UniversityProfileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUniversityProfileInput = {
    create?: XOR<UserCreateWithoutUniversityProfileInput, UserUncheckedCreateWithoutUniversityProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUniversityProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UniversityCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UniversityCreateWithoutProfilesInput, UniversityUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutProfilesInput
    connect?: UniversityWhereUniqueInput
  }

  export type OpenCallCreateNestedManyWithoutAuthorInput = {
    create?: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput> | OpenCallCreateWithoutAuthorInput[] | OpenCallUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: OpenCallCreateOrConnectWithoutAuthorInput | OpenCallCreateOrConnectWithoutAuthorInput[]
    createMany?: OpenCallCreateManyAuthorInputEnvelope
    connect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
  }

  export type OpenCallUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput> | OpenCallCreateWithoutAuthorInput[] | OpenCallUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: OpenCallCreateOrConnectWithoutAuthorInput | OpenCallCreateOrConnectWithoutAuthorInput[]
    createMany?: OpenCallCreateManyAuthorInputEnvelope
    connect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUniversityProfileNestedInput = {
    create?: XOR<UserCreateWithoutUniversityProfileInput, UserUncheckedCreateWithoutUniversityProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUniversityProfileInput
    upsert?: UserUpsertWithoutUniversityProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUniversityProfileInput, UserUpdateWithoutUniversityProfileInput>, UserUncheckedUpdateWithoutUniversityProfileInput>
  }

  export type UniversityUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<UniversityCreateWithoutProfilesInput, UniversityUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutProfilesInput
    upsert?: UniversityUpsertWithoutProfilesInput
    connect?: UniversityWhereUniqueInput
    update?: XOR<XOR<UniversityUpdateToOneWithWhereWithoutProfilesInput, UniversityUpdateWithoutProfilesInput>, UniversityUncheckedUpdateWithoutProfilesInput>
  }

  export type OpenCallUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput> | OpenCallCreateWithoutAuthorInput[] | OpenCallUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: OpenCallCreateOrConnectWithoutAuthorInput | OpenCallCreateOrConnectWithoutAuthorInput[]
    upsert?: OpenCallUpsertWithWhereUniqueWithoutAuthorInput | OpenCallUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: OpenCallCreateManyAuthorInputEnvelope
    set?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    disconnect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    delete?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    connect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    update?: OpenCallUpdateWithWhereUniqueWithoutAuthorInput | OpenCallUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: OpenCallUpdateManyWithWhereWithoutAuthorInput | OpenCallUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: OpenCallScalarWhereInput | OpenCallScalarWhereInput[]
  }

  export type OpenCallUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput> | OpenCallCreateWithoutAuthorInput[] | OpenCallUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: OpenCallCreateOrConnectWithoutAuthorInput | OpenCallCreateOrConnectWithoutAuthorInput[]
    upsert?: OpenCallUpsertWithWhereUniqueWithoutAuthorInput | OpenCallUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: OpenCallCreateManyAuthorInputEnvelope
    set?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    disconnect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    delete?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    connect?: OpenCallWhereUniqueInput | OpenCallWhereUniqueInput[]
    update?: OpenCallUpdateWithWhereUniqueWithoutAuthorInput | OpenCallUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: OpenCallUpdateManyWithWhereWithoutAuthorInput | OpenCallUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: OpenCallScalarWhereInput | OpenCallScalarWhereInput[]
  }

  export type OpenCallCreatekeywordsInput = {
    set: string[]
  }

  export type OpenCallCreateprojectTypesInput = {
    set: $Enums.ProjectType[]
  }

  export type OpenCallCreateeligibleInstitutionTypesInput = {
    set: string[]
  }

  export type OpenCallCreateeligibleCountriesInput = {
    set: string[]
  }

  export type OpenCallCreateeligibleCareerStagesInput = {
    set: $Enums.JobType[]
  }

  export type UniversityProfileCreateNestedOneWithoutOpenCallsInput = {
    create?: XOR<UniversityProfileCreateWithoutOpenCallsInput, UniversityProfileUncheckedCreateWithoutOpenCallsInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutOpenCallsInput
    connect?: UniversityProfileWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutOpenCallInput = {
    create?: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput> | ApplicationCreateWithoutOpenCallInput[] | ApplicationUncheckedCreateWithoutOpenCallInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutOpenCallInput | ApplicationCreateOrConnectWithoutOpenCallInput[]
    createMany?: ApplicationCreateManyOpenCallInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutOpenCallInput = {
    create?: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput> | ApplicationCreateWithoutOpenCallInput[] | ApplicationUncheckedCreateWithoutOpenCallInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutOpenCallInput | ApplicationCreateOrConnectWithoutOpenCallInput[]
    createMany?: ApplicationCreateManyOpenCallInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type OpenCallUpdatekeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OpenCallUpdateprojectTypesInput = {
    set?: $Enums.ProjectType[]
    push?: $Enums.ProjectType | $Enums.ProjectType[]
  }

  export type OpenCallUpdateeligibleInstitutionTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OpenCallUpdateeligibleCountriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OpenCallUpdateeligibleCareerStagesInput = {
    set?: $Enums.JobType[]
    push?: $Enums.JobType | $Enums.JobType[]
  }

  export type EnumOpenCallStatusFieldUpdateOperationsInput = {
    set?: $Enums.OpenCallStatus
  }

  export type UniversityProfileUpdateOneRequiredWithoutOpenCallsNestedInput = {
    create?: XOR<UniversityProfileCreateWithoutOpenCallsInput, UniversityProfileUncheckedCreateWithoutOpenCallsInput>
    connectOrCreate?: UniversityProfileCreateOrConnectWithoutOpenCallsInput
    upsert?: UniversityProfileUpsertWithoutOpenCallsInput
    connect?: UniversityProfileWhereUniqueInput
    update?: XOR<XOR<UniversityProfileUpdateToOneWithWhereWithoutOpenCallsInput, UniversityProfileUpdateWithoutOpenCallsInput>, UniversityProfileUncheckedUpdateWithoutOpenCallsInput>
  }

  export type ApplicationUpdateManyWithoutOpenCallNestedInput = {
    create?: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput> | ApplicationCreateWithoutOpenCallInput[] | ApplicationUncheckedCreateWithoutOpenCallInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutOpenCallInput | ApplicationCreateOrConnectWithoutOpenCallInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutOpenCallInput | ApplicationUpsertWithWhereUniqueWithoutOpenCallInput[]
    createMany?: ApplicationCreateManyOpenCallInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutOpenCallInput | ApplicationUpdateWithWhereUniqueWithoutOpenCallInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutOpenCallInput | ApplicationUpdateManyWithWhereWithoutOpenCallInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutOpenCallNestedInput = {
    create?: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput> | ApplicationCreateWithoutOpenCallInput[] | ApplicationUncheckedCreateWithoutOpenCallInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutOpenCallInput | ApplicationCreateOrConnectWithoutOpenCallInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutOpenCallInput | ApplicationUpsertWithWhereUniqueWithoutOpenCallInput[]
    createMany?: ApplicationCreateManyOpenCallInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutOpenCallInput | ApplicationUpdateWithWhereUniqueWithoutOpenCallInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutOpenCallInput | ApplicationUpdateManyWithWhereWithoutOpenCallInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ResearcherProfileCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<ResearcherProfileCreateWithoutApplicationsInput, ResearcherProfileUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutApplicationsInput
    connect?: ResearcherProfileWhereUniqueInput
  }

  export type OpenCallCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<OpenCallCreateWithoutApplicationsInput, OpenCallUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: OpenCallCreateOrConnectWithoutApplicationsInput
    connect?: OpenCallWhereUniqueInput
  }

  export type ProposalCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ProposalCreateWithoutApplicationInput, ProposalUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApplicationInput
    connect?: ProposalWhereUniqueInput
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type NullableEnumOfferTypeFieldUpdateOperationsInput = {
    set?: $Enums.OfferType | null
  }

  export type NullableEnumOfferResponseFieldUpdateOperationsInput = {
    set?: $Enums.OfferResponse | null
  }

  export type ResearcherProfileUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<ResearcherProfileCreateWithoutApplicationsInput, ResearcherProfileUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ResearcherProfileCreateOrConnectWithoutApplicationsInput
    upsert?: ResearcherProfileUpsertWithoutApplicationsInput
    connect?: ResearcherProfileWhereUniqueInput
    update?: XOR<XOR<ResearcherProfileUpdateToOneWithWhereWithoutApplicationsInput, ResearcherProfileUpdateWithoutApplicationsInput>, ResearcherProfileUncheckedUpdateWithoutApplicationsInput>
  }

  export type OpenCallUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<OpenCallCreateWithoutApplicationsInput, OpenCallUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: OpenCallCreateOrConnectWithoutApplicationsInput
    upsert?: OpenCallUpsertWithoutApplicationsInput
    connect?: OpenCallWhereUniqueInput
    update?: XOR<XOR<OpenCallUpdateToOneWithWhereWithoutApplicationsInput, OpenCallUpdateWithoutApplicationsInput>, OpenCallUncheckedUpdateWithoutApplicationsInput>
  }

  export type ProposalUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<ProposalCreateWithoutApplicationInput, ProposalUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApplicationInput
    upsert?: ProposalUpsertWithoutApplicationInput
    disconnect?: ProposalWhereInput | boolean
    delete?: ProposalWhereInput | boolean
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutApplicationInput, ProposalUpdateWithoutApplicationInput>, ProposalUncheckedUpdateWithoutApplicationInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOpenCallStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OpenCallStatus | EnumOpenCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOpenCallStatusFilter<$PrismaModel> | $Enums.OpenCallStatus
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumOpenCallStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OpenCallStatus | EnumOpenCallStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpenCallStatus[] | ListEnumOpenCallStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOpenCallStatusWithAggregatesFilter<$PrismaModel> | $Enums.OpenCallStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOpenCallStatusFilter<$PrismaModel>
    _max?: NestedEnumOpenCallStatusFilter<$PrismaModel>
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumOfferTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferType | EnumOfferTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferTypeNullableFilter<$PrismaModel> | $Enums.OfferType | null
  }

  export type NestedEnumOfferResponseNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferResponse | EnumOfferResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferResponseNullableFilter<$PrismaModel> | $Enums.OfferResponse | null
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedEnumOfferTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferType | EnumOfferTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferType[] | ListEnumOfferTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OfferType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOfferTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOfferTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumOfferResponseNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OfferResponse | EnumOfferResponseFieldRefInput<$PrismaModel> | null
    in?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OfferResponse[] | ListEnumOfferResponseFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOfferResponseNullableWithAggregatesFilter<$PrismaModel> | $Enums.OfferResponse | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOfferResponseNullableFilter<$PrismaModel>
    _max?: NestedEnumOfferResponseNullableFilter<$PrismaModel>
  }

  export type ResearcherProfileCreateWithoutUserInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileCreateOrConnectWithoutUserInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
  }

  export type UniversityProfileCreateWithoutUserInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    university: UniversityCreateNestedOneWithoutProfilesInput
    openCalls?: OpenCallCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileUncheckedCreateWithoutUserInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    universityId: string
    openCalls?: OpenCallUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileCreateOrConnectWithoutUserInput = {
    where: UniversityProfileWhereUniqueInput
    create: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
  }

  export type ResearcherProfileUpsertWithoutUserInput = {
    update: XOR<ResearcherProfileUpdateWithoutUserInput, ResearcherProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ResearcherProfileCreateWithoutUserInput, ResearcherProfileUncheckedCreateWithoutUserInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutUserInput, ResearcherProfileUncheckedUpdateWithoutUserInput>
  }

  export type ResearcherProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type UniversityProfileUpsertWithoutUserInput = {
    update: XOR<UniversityProfileUpdateWithoutUserInput, UniversityProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UniversityProfileCreateWithoutUserInput, UniversityProfileUncheckedCreateWithoutUserInput>
    where?: UniversityProfileWhereInput
  }

  export type UniversityProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UniversityProfileWhereInput
    data: XOR<UniversityProfileUpdateWithoutUserInput, UniversityProfileUncheckedUpdateWithoutUserInput>
  }

  export type UniversityProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: UniversityUpdateOneRequiredWithoutProfilesNestedInput
    openCalls?: OpenCallUpdateManyWithoutAuthorNestedInput
  }

  export type UniversityProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    universityId?: StringFieldUpdateOperationsInput | string
    openCalls?: OpenCallUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateWithoutResearcherProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    universityProfile?: UniversityProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResearcherProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    universityProfile?: UniversityProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResearcherProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResearcherProfileInput, UserUncheckedCreateWithoutResearcherProfileInput>
  }

  export type EducationCreateWithoutResearcherProfileInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EducationUncheckedCreateWithoutResearcherProfileInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EducationCreateOrConnectWithoutResearcherProfileInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput>
  }

  export type EducationCreateManyResearcherProfileInputEnvelope = {
    data: EducationCreateManyResearcherProfileInput | EducationCreateManyResearcherProfileInput[]
    skipDuplicates?: boolean
  }

  export type PublicationCreateWithoutResearcherProfileInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
  }

  export type PublicationUncheckedCreateWithoutResearcherProfileInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
  }

  export type PublicationCreateOrConnectWithoutResearcherProfileInput = {
    where: PublicationWhereUniqueInput
    create: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput>
  }

  export type PublicationCreateManyResearcherProfileInputEnvelope = {
    data: PublicationCreateManyResearcherProfileInput | PublicationCreateManyResearcherProfileInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutResearcherProfileInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
  }

  export type DocumentUncheckedCreateWithoutResearcherProfileInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
  }

  export type DocumentCreateOrConnectWithoutResearcherProfileInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput>
  }

  export type DocumentCreateManyResearcherProfileInputEnvelope = {
    data: DocumentCreateManyResearcherProfileInput | DocumentCreateManyResearcherProfileInput[]
    skipDuplicates?: boolean
  }

  export type ProposalCreateWithoutResearcherProfileInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: ApplicationCreateNestedOneWithoutSubmittedProposalInput
  }

  export type ProposalUncheckedCreateWithoutResearcherProfileInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: ApplicationUncheckedCreateNestedOneWithoutSubmittedProposalInput
  }

  export type ProposalCreateOrConnectWithoutResearcherProfileInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput>
  }

  export type ProposalCreateManyResearcherProfileInputEnvelope = {
    data: ProposalCreateManyResearcherProfileInput | ProposalCreateManyResearcherProfileInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutApplicantInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    openCall: OpenCallCreateNestedOneWithoutApplicationsInput
    submittedProposal?: ProposalCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutApplicantInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    openCallId: string
    submittedProposalId?: string | null
  }

  export type ApplicationCreateOrConnectWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicationCreateManyApplicantInputEnvelope = {
    data: ApplicationCreateManyApplicantInput | ApplicationCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutResearcherProfileInput = {
    update: XOR<UserUpdateWithoutResearcherProfileInput, UserUncheckedUpdateWithoutResearcherProfileInput>
    create: XOR<UserCreateWithoutResearcherProfileInput, UserUncheckedCreateWithoutResearcherProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResearcherProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResearcherProfileInput, UserUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type UserUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    universityProfile?: UniversityProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    universityProfile?: UniversityProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type EducationUpsertWithWhereUniqueWithoutResearcherProfileInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutResearcherProfileInput, EducationUncheckedUpdateWithoutResearcherProfileInput>
    create: XOR<EducationCreateWithoutResearcherProfileInput, EducationUncheckedCreateWithoutResearcherProfileInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutResearcherProfileInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutResearcherProfileInput, EducationUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type EducationUpdateManyWithWhereWithoutResearcherProfileInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutResearcherProfileInput>
  }

  export type EducationScalarWhereInput = {
    AND?: EducationScalarWhereInput | EducationScalarWhereInput[]
    OR?: EducationScalarWhereInput[]
    NOT?: EducationScalarWhereInput | EducationScalarWhereInput[]
    id?: StringFilter<"Education"> | string
    degree?: StringFilter<"Education"> | string
    fieldOfStudy?: StringFilter<"Education"> | string
    institution?: StringFilter<"Education"> | string
    country?: StringFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    researcherProfileId?: StringFilter<"Education"> | string
  }

  export type PublicationUpsertWithWhereUniqueWithoutResearcherProfileInput = {
    where: PublicationWhereUniqueInput
    update: XOR<PublicationUpdateWithoutResearcherProfileInput, PublicationUncheckedUpdateWithoutResearcherProfileInput>
    create: XOR<PublicationCreateWithoutResearcherProfileInput, PublicationUncheckedCreateWithoutResearcherProfileInput>
  }

  export type PublicationUpdateWithWhereUniqueWithoutResearcherProfileInput = {
    where: PublicationWhereUniqueInput
    data: XOR<PublicationUpdateWithoutResearcherProfileInput, PublicationUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type PublicationUpdateManyWithWhereWithoutResearcherProfileInput = {
    where: PublicationScalarWhereInput
    data: XOR<PublicationUpdateManyMutationInput, PublicationUncheckedUpdateManyWithoutResearcherProfileInput>
  }

  export type PublicationScalarWhereInput = {
    AND?: PublicationScalarWhereInput | PublicationScalarWhereInput[]
    OR?: PublicationScalarWhereInput[]
    NOT?: PublicationScalarWhereInput | PublicationScalarWhereInput[]
    id?: StringFilter<"Publication"> | string
    title?: StringFilter<"Publication"> | string
    journal?: StringNullableFilter<"Publication"> | string | null
    year?: IntFilter<"Publication"> | number
    link?: StringNullableFilter<"Publication"> | string | null
    researcherProfileId?: StringFilter<"Publication"> | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutResearcherProfileInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutResearcherProfileInput, DocumentUncheckedUpdateWithoutResearcherProfileInput>
    create: XOR<DocumentCreateWithoutResearcherProfileInput, DocumentUncheckedCreateWithoutResearcherProfileInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutResearcherProfileInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutResearcherProfileInput, DocumentUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type DocumentUpdateManyWithWhereWithoutResearcherProfileInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutResearcherProfileInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    researcherProfileId?: StringFilter<"Document"> | string
  }

  export type ProposalUpsertWithWhereUniqueWithoutResearcherProfileInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutResearcherProfileInput, ProposalUncheckedUpdateWithoutResearcherProfileInput>
    create: XOR<ProposalCreateWithoutResearcherProfileInput, ProposalUncheckedCreateWithoutResearcherProfileInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutResearcherProfileInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutResearcherProfileInput, ProposalUncheckedUpdateWithoutResearcherProfileInput>
  }

  export type ProposalUpdateManyWithWhereWithoutResearcherProfileInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutResearcherProfileInput>
  }

  export type ProposalScalarWhereInput = {
    AND?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    OR?: ProposalScalarWhereInput[]
    NOT?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    id?: StringFilter<"Proposal"> | string
    title?: StringFilter<"Proposal"> | string
    content?: JsonFilter<"Proposal">
    isFinal?: BoolFilter<"Proposal"> | boolean
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    researcherProfileId?: StringFilter<"Proposal"> | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutApplicantInput, ApplicationUncheckedUpdateWithoutApplicantInput>
    create: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutApplicantInput, ApplicationUncheckedUpdateWithoutApplicantInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutApplicantInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicantInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: StringFilter<"Application"> | string
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    submittedAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    submittedCoverLetter?: StringNullableFilter<"Application"> | string | null
    customApplicationAnswers?: JsonNullableFilter<"Application">
    offerType?: EnumOfferTypeNullableFilter<"Application"> | $Enums.OfferType | null
    offerConditions?: StringNullableFilter<"Application"> | string | null
    offerRespondedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    researcherResponse?: EnumOfferResponseNullableFilter<"Application"> | $Enums.OfferResponse | null
    applicantId?: StringFilter<"Application"> | string
    openCallId?: StringFilter<"Application"> | string
    submittedProposalId?: StringNullableFilter<"Application"> | string | null
  }

  export type ResearcherProfileCreateWithoutEducationInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateWithoutEducationInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileCreateOrConnectWithoutEducationInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutEducationInput, ResearcherProfileUncheckedCreateWithoutEducationInput>
  }

  export type ResearcherProfileUpsertWithoutEducationInput = {
    update: XOR<ResearcherProfileUpdateWithoutEducationInput, ResearcherProfileUncheckedUpdateWithoutEducationInput>
    create: XOR<ResearcherProfileCreateWithoutEducationInput, ResearcherProfileUncheckedCreateWithoutEducationInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutEducationInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutEducationInput, ResearcherProfileUncheckedUpdateWithoutEducationInput>
  }

  export type ResearcherProfileUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileCreateWithoutPublicationsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateWithoutPublicationsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileCreateOrConnectWithoutPublicationsInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutPublicationsInput, ResearcherProfileUncheckedCreateWithoutPublicationsInput>
  }

  export type ResearcherProfileUpsertWithoutPublicationsInput = {
    update: XOR<ResearcherProfileUpdateWithoutPublicationsInput, ResearcherProfileUncheckedUpdateWithoutPublicationsInput>
    create: XOR<ResearcherProfileCreateWithoutPublicationsInput, ResearcherProfileUncheckedCreateWithoutPublicationsInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutPublicationsInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutPublicationsInput, ResearcherProfileUncheckedUpdateWithoutPublicationsInput>
  }

  export type ResearcherProfileUpdateWithoutPublicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutPublicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileCreateWithoutDocumentsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateWithoutDocumentsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileCreateOrConnectWithoutDocumentsInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutDocumentsInput, ResearcherProfileUncheckedCreateWithoutDocumentsInput>
  }

  export type ResearcherProfileUpsertWithoutDocumentsInput = {
    update: XOR<ResearcherProfileUpdateWithoutDocumentsInput, ResearcherProfileUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ResearcherProfileCreateWithoutDocumentsInput, ResearcherProfileUncheckedCreateWithoutDocumentsInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutDocumentsInput, ResearcherProfileUncheckedUpdateWithoutDocumentsInput>
  }

  export type ResearcherProfileUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileCreateWithoutProposalsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileUncheckedCreateWithoutProposalsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
  }

  export type ResearcherProfileCreateOrConnectWithoutProposalsInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutProposalsInput, ResearcherProfileUncheckedCreateWithoutProposalsInput>
  }

  export type ApplicationCreateWithoutSubmittedProposalInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicant: ResearcherProfileCreateNestedOneWithoutApplicationsInput
    openCall: OpenCallCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutSubmittedProposalInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicantId: string
    openCallId: string
  }

  export type ApplicationCreateOrConnectWithoutSubmittedProposalInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
  }

  export type ResearcherProfileUpsertWithoutProposalsInput = {
    update: XOR<ResearcherProfileUpdateWithoutProposalsInput, ResearcherProfileUncheckedUpdateWithoutProposalsInput>
    create: XOR<ResearcherProfileCreateWithoutProposalsInput, ResearcherProfileUncheckedCreateWithoutProposalsInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutProposalsInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutProposalsInput, ResearcherProfileUncheckedUpdateWithoutProposalsInput>
  }

  export type ResearcherProfileUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
  }

  export type ApplicationUpsertWithoutSubmittedProposalInput = {
    update: XOR<ApplicationUpdateWithoutSubmittedProposalInput, ApplicationUncheckedUpdateWithoutSubmittedProposalInput>
    create: XOR<ApplicationCreateWithoutSubmittedProposalInput, ApplicationUncheckedCreateWithoutSubmittedProposalInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutSubmittedProposalInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutSubmittedProposalInput, ApplicationUncheckedUpdateWithoutSubmittedProposalInput>
  }

  export type ApplicationUpdateWithoutSubmittedProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicant?: ResearcherProfileUpdateOneRequiredWithoutApplicationsNestedInput
    openCall?: OpenCallUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutSubmittedProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicantId?: StringFieldUpdateOperationsInput | string
    openCallId?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityProfileCreateWithoutUniversityInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUniversityProfileInput
    openCalls?: OpenCallCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileUncheckedCreateWithoutUniversityInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    openCalls?: OpenCallUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UniversityProfileCreateOrConnectWithoutUniversityInput = {
    where: UniversityProfileWhereUniqueInput
    create: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput>
  }

  export type UniversityProfileCreateManyUniversityInputEnvelope = {
    data: UniversityProfileCreateManyUniversityInput | UniversityProfileCreateManyUniversityInput[]
    skipDuplicates?: boolean
  }

  export type UniversityProfileUpsertWithWhereUniqueWithoutUniversityInput = {
    where: UniversityProfileWhereUniqueInput
    update: XOR<UniversityProfileUpdateWithoutUniversityInput, UniversityProfileUncheckedUpdateWithoutUniversityInput>
    create: XOR<UniversityProfileCreateWithoutUniversityInput, UniversityProfileUncheckedCreateWithoutUniversityInput>
  }

  export type UniversityProfileUpdateWithWhereUniqueWithoutUniversityInput = {
    where: UniversityProfileWhereUniqueInput
    data: XOR<UniversityProfileUpdateWithoutUniversityInput, UniversityProfileUncheckedUpdateWithoutUniversityInput>
  }

  export type UniversityProfileUpdateManyWithWhereWithoutUniversityInput = {
    where: UniversityProfileScalarWhereInput
    data: XOR<UniversityProfileUpdateManyMutationInput, UniversityProfileUncheckedUpdateManyWithoutUniversityInput>
  }

  export type UniversityProfileScalarWhereInput = {
    AND?: UniversityProfileScalarWhereInput | UniversityProfileScalarWhereInput[]
    OR?: UniversityProfileScalarWhereInput[]
    NOT?: UniversityProfileScalarWhereInput | UniversityProfileScalarWhereInput[]
    id?: StringFilter<"UniversityProfile"> | string
    departmentName?: StringFilter<"UniversityProfile"> | string
    faculty?: StringNullableFilter<"UniversityProfile"> | string | null
    logoUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    bannerImageUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    address?: StringNullableFilter<"UniversityProfile"> | string | null
    websiteUrl?: StringNullableFilter<"UniversityProfile"> | string | null
    description?: StringNullableFilter<"UniversityProfile"> | string | null
    createdAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UniversityProfile"> | Date | string
    userId?: StringFilter<"UniversityProfile"> | string
    universityId?: StringFilter<"UniversityProfile"> | string
  }

  export type UserCreateWithoutUniversityProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile?: ResearcherProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUniversityProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    googleId?: string | null
    linkedInId?: string | null
    orcidId?: string | null
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile?: ResearcherProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUniversityProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUniversityProfileInput, UserUncheckedCreateWithoutUniversityProfileInput>
  }

  export type UniversityCreateWithoutProfilesInput = {
    id?: string
    name: string
    country: string
  }

  export type UniversityUncheckedCreateWithoutProfilesInput = {
    id?: string
    name: string
    country: string
  }

  export type UniversityCreateOrConnectWithoutProfilesInput = {
    where: UniversityWhereUniqueInput
    create: XOR<UniversityCreateWithoutProfilesInput, UniversityUncheckedCreateWithoutProfilesInput>
  }

  export type OpenCallCreateWithoutAuthorInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutOpenCallInput
  }

  export type OpenCallUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutOpenCallInput
  }

  export type OpenCallCreateOrConnectWithoutAuthorInput = {
    where: OpenCallWhereUniqueInput
    create: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput>
  }

  export type OpenCallCreateManyAuthorInputEnvelope = {
    data: OpenCallCreateManyAuthorInput | OpenCallCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUniversityProfileInput = {
    update: XOR<UserUpdateWithoutUniversityProfileInput, UserUncheckedUpdateWithoutUniversityProfileInput>
    create: XOR<UserCreateWithoutUniversityProfileInput, UserUncheckedCreateWithoutUniversityProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUniversityProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUniversityProfileInput, UserUncheckedUpdateWithoutUniversityProfileInput>
  }

  export type UserUpdateWithoutUniversityProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUniversityProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    linkedInId?: NullableStringFieldUpdateOperationsInput | string | null
    orcidId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UniversityUpsertWithoutProfilesInput = {
    update: XOR<UniversityUpdateWithoutProfilesInput, UniversityUncheckedUpdateWithoutProfilesInput>
    create: XOR<UniversityCreateWithoutProfilesInput, UniversityUncheckedCreateWithoutProfilesInput>
    where?: UniversityWhereInput
  }

  export type UniversityUpdateToOneWithWhereWithoutProfilesInput = {
    where?: UniversityWhereInput
    data: XOR<UniversityUpdateWithoutProfilesInput, UniversityUncheckedUpdateWithoutProfilesInput>
  }

  export type UniversityUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type OpenCallUpsertWithWhereUniqueWithoutAuthorInput = {
    where: OpenCallWhereUniqueInput
    update: XOR<OpenCallUpdateWithoutAuthorInput, OpenCallUncheckedUpdateWithoutAuthorInput>
    create: XOR<OpenCallCreateWithoutAuthorInput, OpenCallUncheckedCreateWithoutAuthorInput>
  }

  export type OpenCallUpdateWithWhereUniqueWithoutAuthorInput = {
    where: OpenCallWhereUniqueInput
    data: XOR<OpenCallUpdateWithoutAuthorInput, OpenCallUncheckedUpdateWithoutAuthorInput>
  }

  export type OpenCallUpdateManyWithWhereWithoutAuthorInput = {
    where: OpenCallScalarWhereInput
    data: XOR<OpenCallUpdateManyMutationInput, OpenCallUncheckedUpdateManyWithoutAuthorInput>
  }

  export type OpenCallScalarWhereInput = {
    AND?: OpenCallScalarWhereInput | OpenCallScalarWhereInput[]
    OR?: OpenCallScalarWhereInput[]
    NOT?: OpenCallScalarWhereInput | OpenCallScalarWhereInput[]
    id?: StringFilter<"OpenCall"> | string
    title?: StringFilter<"OpenCall"> | string
    summary?: StringFilter<"OpenCall"> | string
    researchArea?: StringFilter<"OpenCall"> | string
    keywords?: StringNullableListFilter<"OpenCall">
    projectTypes?: EnumProjectTypeNullableListFilter<"OpenCall">
    targetNumberOfAwards?: IntFilter<"OpenCall"> | number
    assistanceOffered?: StringNullableFilter<"OpenCall"> | string | null
    eligibleInstitutionTypes?: StringNullableListFilter<"OpenCall">
    eligibleCountries?: StringNullableListFilter<"OpenCall">
    eligibleCareerStages?: EnumJobTypeNullableListFilter<"OpenCall">
    requiresProposal?: BoolFilter<"OpenCall"> | boolean
    proposalTemplateUrl?: StringNullableFilter<"OpenCall"> | string | null
    customApplicationQuestions?: JsonNullableFilter<"OpenCall">
    evaluationCriteria?: JsonNullableFilter<"OpenCall">
    fundingType?: StringFilter<"OpenCall"> | string
    fundingAmount?: StringFilter<"OpenCall"> | string
    submissionOpenDate?: DateTimeFilter<"OpenCall"> | Date | string
    submissionDeadline?: DateTimeFilter<"OpenCall"> | Date | string
    reviewPeriodStartDate?: DateTimeFilter<"OpenCall"> | Date | string
    notificationDate?: DateTimeFilter<"OpenCall"> | Date | string
    status?: EnumOpenCallStatusFilter<"OpenCall"> | $Enums.OpenCallStatus
    createdAt?: DateTimeFilter<"OpenCall"> | Date | string
    updatedAt?: DateTimeFilter<"OpenCall"> | Date | string
    authorId?: StringFilter<"OpenCall"> | string
  }

  export type UniversityProfileCreateWithoutOpenCallsInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUniversityProfileInput
    university: UniversityCreateNestedOneWithoutProfilesInput
  }

  export type UniversityProfileUncheckedCreateWithoutOpenCallsInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    universityId: string
  }

  export type UniversityProfileCreateOrConnectWithoutOpenCallsInput = {
    where: UniversityProfileWhereUniqueInput
    create: XOR<UniversityProfileCreateWithoutOpenCallsInput, UniversityProfileUncheckedCreateWithoutOpenCallsInput>
  }

  export type ApplicationCreateWithoutOpenCallInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicant: ResearcherProfileCreateNestedOneWithoutApplicationsInput
    submittedProposal?: ProposalCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutOpenCallInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicantId: string
    submittedProposalId?: string | null
  }

  export type ApplicationCreateOrConnectWithoutOpenCallInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput>
  }

  export type ApplicationCreateManyOpenCallInputEnvelope = {
    data: ApplicationCreateManyOpenCallInput | ApplicationCreateManyOpenCallInput[]
    skipDuplicates?: boolean
  }

  export type UniversityProfileUpsertWithoutOpenCallsInput = {
    update: XOR<UniversityProfileUpdateWithoutOpenCallsInput, UniversityProfileUncheckedUpdateWithoutOpenCallsInput>
    create: XOR<UniversityProfileCreateWithoutOpenCallsInput, UniversityProfileUncheckedCreateWithoutOpenCallsInput>
    where?: UniversityProfileWhereInput
  }

  export type UniversityProfileUpdateToOneWithWhereWithoutOpenCallsInput = {
    where?: UniversityProfileWhereInput
    data: XOR<UniversityProfileUpdateWithoutOpenCallsInput, UniversityProfileUncheckedUpdateWithoutOpenCallsInput>
  }

  export type UniversityProfileUpdateWithoutOpenCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUniversityProfileNestedInput
    university?: UniversityUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type UniversityProfileUncheckedUpdateWithoutOpenCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    universityId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutOpenCallInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutOpenCallInput, ApplicationUncheckedUpdateWithoutOpenCallInput>
    create: XOR<ApplicationCreateWithoutOpenCallInput, ApplicationUncheckedCreateWithoutOpenCallInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutOpenCallInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutOpenCallInput, ApplicationUncheckedUpdateWithoutOpenCallInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutOpenCallInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutOpenCallInput>
  }

  export type ResearcherProfileCreateWithoutApplicationsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutResearcherProfileInput
    education?: EducationCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalCreateNestedManyWithoutResearcherProfileInput
  }

  export type ResearcherProfileUncheckedCreateWithoutApplicationsInput = {
    id?: string
    fullName: string
    professionalTitle?: string | null
    currentInstitution?: string | null
    currentLocation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    education?: EducationUncheckedCreateNestedManyWithoutResearcherProfileInput
    publications?: PublicationUncheckedCreateNestedManyWithoutResearcherProfileInput
    documents?: DocumentUncheckedCreateNestedManyWithoutResearcherProfileInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutResearcherProfileInput
  }

  export type ResearcherProfileCreateOrConnectWithoutApplicationsInput = {
    where: ResearcherProfileWhereUniqueInput
    create: XOR<ResearcherProfileCreateWithoutApplicationsInput, ResearcherProfileUncheckedCreateWithoutApplicationsInput>
  }

  export type OpenCallCreateWithoutApplicationsInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UniversityProfileCreateNestedOneWithoutOpenCallsInput
  }

  export type OpenCallUncheckedCreateWithoutApplicationsInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type OpenCallCreateOrConnectWithoutApplicationsInput = {
    where: OpenCallWhereUniqueInput
    create: XOR<OpenCallCreateWithoutApplicationsInput, OpenCallUncheckedCreateWithoutApplicationsInput>
  }

  export type ProposalCreateWithoutApplicationInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfile: ResearcherProfileCreateNestedOneWithoutProposalsInput
  }

  export type ProposalUncheckedCreateWithoutApplicationInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    researcherProfileId: string
  }

  export type ProposalCreateOrConnectWithoutApplicationInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutApplicationInput, ProposalUncheckedCreateWithoutApplicationInput>
  }

  export type ResearcherProfileUpsertWithoutApplicationsInput = {
    update: XOR<ResearcherProfileUpdateWithoutApplicationsInput, ResearcherProfileUncheckedUpdateWithoutApplicationsInput>
    create: XOR<ResearcherProfileCreateWithoutApplicationsInput, ResearcherProfileUncheckedCreateWithoutApplicationsInput>
    where?: ResearcherProfileWhereInput
  }

  export type ResearcherProfileUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: ResearcherProfileWhereInput
    data: XOR<ResearcherProfileUpdateWithoutApplicationsInput, ResearcherProfileUncheckedUpdateWithoutApplicationsInput>
  }

  export type ResearcherProfileUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResearcherProfileNestedInput
    education?: EducationUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUpdateManyWithoutResearcherProfileNestedInput
  }

  export type ResearcherProfileUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    professionalTitle?: NullableStringFieldUpdateOperationsInput | string | null
    currentInstitution?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    publications?: PublicationUncheckedUpdateManyWithoutResearcherProfileNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutResearcherProfileNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutResearcherProfileNestedInput
  }

  export type OpenCallUpsertWithoutApplicationsInput = {
    update: XOR<OpenCallUpdateWithoutApplicationsInput, OpenCallUncheckedUpdateWithoutApplicationsInput>
    create: XOR<OpenCallCreateWithoutApplicationsInput, OpenCallUncheckedCreateWithoutApplicationsInput>
    where?: OpenCallWhereInput
  }

  export type OpenCallUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: OpenCallWhereInput
    data: XOR<OpenCallUpdateWithoutApplicationsInput, OpenCallUncheckedUpdateWithoutApplicationsInput>
  }

  export type OpenCallUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UniversityProfileUpdateOneRequiredWithoutOpenCallsNestedInput
  }

  export type OpenCallUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProposalUpsertWithoutApplicationInput = {
    update: XOR<ProposalUpdateWithoutApplicationInput, ProposalUncheckedUpdateWithoutApplicationInput>
    create: XOR<ProposalCreateWithoutApplicationInput, ProposalUncheckedCreateWithoutApplicationInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutApplicationInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutApplicationInput, ProposalUncheckedUpdateWithoutApplicationInput>
  }

  export type ProposalUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfile?: ResearcherProfileUpdateOneRequiredWithoutProposalsNestedInput
  }

  export type ProposalUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    researcherProfileId?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateManyResearcherProfileInput = {
    id?: string
    degree: string
    fieldOfStudy: string
    institution: string
    country: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type PublicationCreateManyResearcherProfileInput = {
    id?: string
    title: string
    journal?: string | null
    year: number
    link?: string | null
  }

  export type DocumentCreateManyResearcherProfileInput = {
    id?: string
    name: string
    url: string
    type: $Enums.DocumentType
  }

  export type ProposalCreateManyResearcherProfileInput = {
    id?: string
    title: string
    content: JsonNullValueInput | InputJsonValue
    isFinal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationCreateManyApplicantInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    openCallId: string
    submittedProposalId?: string | null
  }

  export type EducationUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateManyWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublicationUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicationUncheckedUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicationUncheckedUpdateManyWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    year?: IntFieldUpdateOperationsInput | number
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
  }

  export type DocumentUncheckedUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
  }

  export type DocumentUncheckedUpdateManyWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
  }

  export type ProposalUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneWithoutSubmittedProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUncheckedUpdateOneWithoutSubmittedProposalNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutResearcherProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    isFinal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    openCall?: OpenCallUpdateOneRequiredWithoutApplicationsNestedInput
    submittedProposal?: ProposalUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    openCallId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    openCallId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UniversityProfileCreateManyUniversityInput = {
    id?: string
    departmentName: string
    faculty?: string | null
    logoUrl?: string | null
    bannerImageUrl?: string | null
    address?: string | null
    websiteUrl?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UniversityProfileUpdateWithoutUniversityInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUniversityProfileNestedInput
    openCalls?: OpenCallUpdateManyWithoutAuthorNestedInput
  }

  export type UniversityProfileUncheckedUpdateWithoutUniversityInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    openCalls?: OpenCallUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UniversityProfileUncheckedUpdateManyWithoutUniversityInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentName?: StringFieldUpdateOperationsInput | string
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OpenCallCreateManyAuthorInput = {
    id?: string
    title: string
    summary: string
    researchArea: string
    keywords?: OpenCallCreatekeywordsInput | string[]
    projectTypes?: OpenCallCreateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards: number
    assistanceOffered?: string | null
    eligibleInstitutionTypes?: OpenCallCreateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallCreateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallCreateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: boolean
    proposalTemplateUrl?: string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType: string
    fundingAmount: string
    submissionOpenDate: Date | string
    submissionDeadline: Date | string
    reviewPeriodStartDate: Date | string
    notificationDate: Date | string
    status?: $Enums.OpenCallStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenCallUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutOpenCallNestedInput
  }

  export type OpenCallUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutOpenCallNestedInput
  }

  export type OpenCallUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    researchArea?: StringFieldUpdateOperationsInput | string
    keywords?: OpenCallUpdatekeywordsInput | string[]
    projectTypes?: OpenCallUpdateprojectTypesInput | $Enums.ProjectType[]
    targetNumberOfAwards?: IntFieldUpdateOperationsInput | number
    assistanceOffered?: NullableStringFieldUpdateOperationsInput | string | null
    eligibleInstitutionTypes?: OpenCallUpdateeligibleInstitutionTypesInput | string[]
    eligibleCountries?: OpenCallUpdateeligibleCountriesInput | string[]
    eligibleCareerStages?: OpenCallUpdateeligibleCareerStagesInput | $Enums.JobType[]
    requiresProposal?: BoolFieldUpdateOperationsInput | boolean
    proposalTemplateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationQuestions?: NullableJsonNullValueInput | InputJsonValue
    evaluationCriteria?: NullableJsonNullValueInput | InputJsonValue
    fundingType?: StringFieldUpdateOperationsInput | string
    fundingAmount?: StringFieldUpdateOperationsInput | string
    submissionOpenDate?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriodStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOpenCallStatusFieldUpdateOperationsInput | $Enums.OpenCallStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateManyOpenCallInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string
    updatedAt?: Date | string
    submittedCoverLetter?: string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: $Enums.OfferType | null
    offerConditions?: string | null
    offerRespondedAt?: Date | string | null
    researcherResponse?: $Enums.OfferResponse | null
    applicantId: string
    submittedProposalId?: string | null
  }

  export type ApplicationUpdateWithoutOpenCallInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicant?: ResearcherProfileUpdateOneRequiredWithoutApplicationsNestedInput
    submittedProposal?: ProposalUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutOpenCallInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyWithoutOpenCallInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedCoverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    customApplicationAnswers?: NullableJsonNullValueInput | InputJsonValue
    offerType?: NullableEnumOfferTypeFieldUpdateOperationsInput | $Enums.OfferType | null
    offerConditions?: NullableStringFieldUpdateOperationsInput | string | null
    offerRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    researcherResponse?: NullableEnumOfferResponseFieldUpdateOperationsInput | $Enums.OfferResponse | null
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedProposalId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ResearcherProfileCountOutputTypeDefaultArgs instead
     */
    export type ResearcherProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearcherProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityCountOutputTypeDefaultArgs instead
     */
    export type UniversityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityProfileCountOutputTypeDefaultArgs instead
     */
    export type UniversityProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenCallCountOutputTypeDefaultArgs instead
     */
    export type OpenCallCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenCallCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResearcherProfileDefaultArgs instead
     */
    export type ResearcherProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearcherProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EducationDefaultArgs instead
     */
    export type EducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EducationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicationDefaultArgs instead
     */
    export type PublicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalDefaultArgs instead
     */
    export type ProposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityDefaultArgs instead
     */
    export type UniversityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityProfileDefaultArgs instead
     */
    export type UniversityProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenCallDefaultArgs instead
     */
    export type OpenCallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenCallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationDefaultArgs instead
     */
    export type ApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}